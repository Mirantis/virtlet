// Code generated by go-bindata. DO NOT EDIT.
// sources:
// deploy/data/virtlet-ds.yaml
package tools

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _deployDataVirtletDsYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x5a\x49\x73\xdb\x38\x16\xbe\xfb\x57\xbc\x6a\x57\x4d\x3a\x07\x5a\x76\x6a\x7a\x92\x56\xcd\x1c\x14\x5b\xed\x51\xb5\x63\xa9\x24\xc5\xc9\x4d\x05\x82\x4f\x14\x5a\x20\xc0\x01\x40\xda\x9a\x5f\x3f\x05\x70\x11\x37\xc9\x4c\xbc\x74\xa7\xc6\x27\x19\xcb\x87\xb7\x2f\x20\x3c\xcf\x3b\x21\x31\xbb\x43\xa5\x99\x14\x43\xc0\x07\x83\xc2\xfe\xd4\x83\xf4\xc2\x47\x43\x2e\x4e\xb6\x4c\x04\x43\xb8\x22\x18\x49\xb1\x40\x73\x12\xa1\x21\x01\x31\x64\x78\x02\x20\x48\x84\x43\x48\x99\x32\x1c\x4d\xfe\xbf\x8e\x09\xc5\x21\x6c\x13\x1f\x3d\xbd\xd3\x06\xa3\x13\x1d\x23\xb5\xcb\x0d\x46\x31\x27\x06\xed\x6f\x80\x2a\x90\xfd\x6b\x82\xd9\x3f\x4e\x7c\xe4\xba\x58\x01\xa0\x12\x61\x58\x73\x59\x01\x6f\xff\x36\x52\x9b\x5b\x34\xf7\x52\x6d\x87\x60\x54\x82\xf9\x78\x20\xf4\x4c\x72\x46\x77\x43\xb8\xe4\x89\x36\xa8\x7e\x63\x4a\x9b\x2f\xcc\x6c\xfe\x9d\x6d\xc9\x17\x9e\x3a\x88\xd9\xe4\x0a\x98\x76\x00\x60\x24\xfc\x7c\xf1\x16\x50\x10\x9f\x23\xdc\x7d\xd2\x76\x44\x27\x2a\x65\x29\x16\x74\x00\x95\xc2\x10\x26\x50\x81\x42\x6d\x88\xda\xc3\xfd\x6c\x24\xf8\x08\x74\x83\x74\x8b\xc1\x5b\x20\x22\x80\x9f\xdf\xbd\xb5\x20\x39\xa4\xd9\x20\x24\x1a\x41\xae\x41\x68\x14\x06\x15\x30\x01\x4c\xb0\x0a\x6c\x85\xbd\xd9\xe4\xaa\xc6\xda\x29\xf8\x52\x1a\x6d\x14\x89\x21\x56\x92\x62\x90\x28\x04\x81\x18\x38\x4a\xa9\x42\x62\x10\x88\xc5\x5a\xb3\x30\x22\xb1\x45\xaf\xa8\x67\xaf\xb5\x1c\x50\xa3\x4a\x19\xc5\x11\xa5\x32\x11\xe6\xb6\xa6\x96\xf2\x4c\x29\xf8\xce\xaa\x03\xee\x72\x09\xc4\x32\xd0\x20\x85\xe3\x46\xc8\x00\x35\xdc\x33\xb3\xb1\x16\xa5\xc8\x3c\x53\xdb\xbf\x0a\x69\x39\xb5\xe6\x50\x64\xbd\xb6\xac\xee\xf6\x4a\xb6\xbb\x47\xad\x51\x00\x85\xff\x49\x98\xc2\xe0\x2a\x51\x4c\x84\x0b\xba\xc1\x20\xe1\x4c\x84\x93\x50\xc8\x72\x78\xfc\x80\x34\x31\xd6\x98\x2b\x3b\x33\xcc\x05\x72\xa4\x46\xaa\x25\xaa\x48\xd7\xa7\x3d\x88\x88\xa1\x9b\xf1\x43\xac\x50\x3b\xfb\xaf\xcf\xdb\x15\x5b\xdc\x0d\x6b\xec\x34\x56\x00\xc8\x18\x15\x31\x52\x0d\x61\x22\x5a\x93\x29\xe1\x09\xb6\x60\x2d\x70\x43\xb6\x96\xef\xcb\x42\xef\xe5\x86\x53\x58\x6e\xb0\x61\x14\x40\x65\xcc\x50\x17\x00\x6f\x34\xac\x39\x3e\xa4\x92\x27\x11\x42\xa0\x58\x5a\xda\xcd\xa9\xb5\x04\xab\x99\x00\xd7\x24\xe1\xc6\xe9\xdf\x69\x8d\x27\x21\x13\x10\x30\xe5\x0c\x13\x85\x4e\x14\x6a\x30\x1b\xb2\xb7\x60\xb7\x8f\x29\x27\x3b\x7b\x9c\x35\x2d\x0c\xc0\xdf\x01\x67\xbe\x3d\x1b\xfe\x56\xfa\x01\x3e\x30\x6d\x0a\x33\xb0\xd6\x7a\x52\x70\x99\xb9\x77\xac\x30\x26\x0a\x3d\xab\x8f\x52\x14\x2c\x22\x21\x0e\x21\x62\x8a\x08\xc3\xf4\xa0\x1e\x03\xf2\xf9\x59\xc2\x79\xe1\xc2\x93\xf5\xad\x34\x33\x85\xd6\x5b\xca\x55\x54\x46\x11\x11\xc1\x5e\xc2\x1e\x0c\xaa\xc7\x9d\xe9\x4d\x39\x95\xc9\xe8\x93\xb5\x6f\x5d\xdd\x90\x11\xb9\xfd\xa0\xbd\xbd\x24\xbd\x4c\x46\xda\x0b\x98\xaa\x68\x2f\xb2\x9b\x67\xc4\x6c\x86\x30\xc8\xa5\xe9\xd5\x37\xb4\x70\x55\x22\x5a\x00\x4a\xc6\x24\x24\xce\x60\xe1\x23\xcb\xc4\xcc\xa4\x20\xfc\xc0\x51\x55\x8c\x02\x37\x90\x74\x8b\x4a\x4b\xba\x3d\xb0\x29\x25\xca\x6e\x1c\x64\x0b\xcf\x6a\x2b\x0b\x10\x2e\xc3\x03\xbb\xad\x1a\xab\xb3\xa7\xb0\x96\x2a\x33\x15\x26\x42\x67\x2b\xd9\x11\x9c\xf9\x83\xdc\x24\x06\x4e\x67\x3a\xb3\x07\x17\x17\x6a\x1a\x2f\x0e\x4d\x89\xf2\x38\xf3\x8f\x1c\xec\x35\x97\x94\x4c\x63\x7a\x60\x5b\x75\x46\x23\x4d\x14\x33\x3b\xeb\x50\xf8\x60\xaa\xee\x17\x2b\x96\x32\x8e\x21\x06\xb5\x70\x0a\x80\x22\x6d\xdb\xc4\xdd\x64\xbe\xbc\x19\x2f\x57\x57\x93\xc5\xe8\xe3\xcd\x78\xf5\xfb\xdd\xa7\x0a\x96\x73\xee\xdf\x94\x8c\xea\xfe\x9d\x85\xdc\x4f\x24\xfe\x1d\x77\x73\x5c\x37\x9d\xbf\x96\xf1\xbc\x6c\x71\x63\x89\x0b\x3a\x01\xd3\x36\x51\xac\xb6\x69\xd4\x98\x96\x71\x66\x2c\x39\x07\x27\xe5\xb1\x8d\xe8\x51\x2a\x39\xd3\x4e\x6f\xcf\x3b\x85\x89\x00\x4a\x34\xc2\xbd\x0d\x3e\x7f\x20\x35\xc0\x25\x25\xbc\x74\x78\x87\x60\x67\xef\x89\x30\x36\xca\xd8\x4c\xc6\x0c\x08\x69\x40\xae\xd7\x8c\x32\xc2\xf9\x0e\x48\x4a\x18\x77\xd9\x4e\x0a\x7c\x06\xc7\xce\x19\xe9\xe3\xd3\x55\xd3\xd0\x3b\x3d\x58\xeb\x01\x0d\x95\x4c\xe2\x93\xa6\x26\x1a\xc3\xf5\xad\xd6\xb8\x23\x19\x24\x1c\x75\x6b\x63\x7b\x5c\x21\x09\xa6\x82\xef\x1a\xa6\x55\x87\xb4\x79\xbb\x85\xd5\x18\xec\x05\x54\x0f\x2c\x4f\x09\x36\x5e\x2b\x6e\x58\xbe\x9b\x66\xd1\x5d\xac\x1d\xda\xdd\x34\x3a\x38\x60\x8c\xed\xdd\x36\x66\x3d\xb2\xdb\xb3\xc1\x0c\x8d\xae\x98\xac\x4d\x3d\x5c\x86\x2e\xa9\xb1\x32\x5d\x6d\x50\x21\xf8\x48\x89\x2b\xb5\xcc\x06\xd5\x3d\xd3\x58\xa6\xb0\x7b\xc6\xb9\x2d\x9f\x82\x84\x22\xa0\x52\x52\x55\x21\x39\xdb\xda\x3a\x8d\x55\x0c\xeb\x14\x3e\xe7\xe5\x9b\xb4\x59\xcd\xcb\xeb\x2c\xba\x21\x2a\xc0\x14\xd6\x8c\x23\xbc\xc9\x64\x20\xc3\x41\x1a\xe9\x01\x59\x07\xef\x7f\xf1\x7d\xdf\xfb\x80\xbf\xbe\xf7\x2e\x2e\xf0\xbd\xf7\xeb\x2f\xff\xb8\xf0\xce\xdf\xfd\xfd\xdd\x39\xa1\xe7\xe7\xe7\xe7\xef\x06\x94\x29\x25\xb5\x97\x46\xab\xf3\x33\x2e\xc3\x37\x43\xb8\xb5\xd5\x26\xdd\x64\x88\x52\x95\xa9\x78\xd7\x8e\xa6\x91\xf6\x0e\x87\xf1\x0a\x29\xed\xe0\x9f\x0b\xf3\xf1\xdd\x6d\xa5\xfd\xa9\xe1\x78\x31\x9f\x4c\xef\x56\x8b\xcf\xb3\xd9\x74\xbe\x7c\xb5\x80\xac\x15\x93\xe9\x4a\x27\x71\x2c\x6b\x96\x09\xed\x90\x7c\x88\xf0\xbf\x74\x1e\x29\x86\x6d\xf0\x61\x02\xb5\x9e\x29\xe9\x63\xf5\x58\x7c\xd8\xf7\x5c\x05\x8d\x8d\x28\x9d\x71\x3d\xf0\x99\x18\x54\xa2\x74\x36\xea\xd1\xc6\x80\x96\x94\x18\xf0\xe0\xf3\xed\xe4\xeb\xb0\xe9\xfb\x83\xaa\xaf\x7b\x4a\xc2\x3f\xad\x51\x0d\x44\xc2\x79\x23\xbf\x75\x56\x8e\x7f\xf5\xfc\xd6\x27\x71\x3d\x5f\x84\x3f\xcd\xf2\x8e\x2b\xf7\xab\x49\x0d\x88\xc2\xb2\xc5\xb2\xc5\xbd\x4e\x62\x54\x11\x13\x3f\x60\x3e\xfc\x11\xf3\x56\x1d\x25\xd1\x8e\x06\xeb\x66\xae\xbb\x50\x02\x0d\xea\xb2\xd1\xc8\x3b\x8c\x41\x66\x3a\x03\xbb\xac\x75\x50\x8f\x2e\xa6\x9b\xef\xfc\x90\x81\xed\xe8\x3b\x51\xed\x44\x67\x37\xd4\xa7\xbe\xf8\xfe\x54\x55\x5d\x81\x86\x16\xda\xcd\x5b\x8d\x16\xa5\x6e\xd8\xb3\xbf\x3d\xa3\x88\xd0\xdc\x11\xd6\xce\x7d\x8e\x9b\xc7\x69\xa9\x49\xe3\xff\xab\xad\x38\x48\xf4\xf4\xcb\xed\xcd\x74\x74\xb5\x9a\xcd\xa7\xcb\xe9\xe5\xf4\xe6\xf5\x48\x97\xf7\x82\x4b\x12\xac\x62\x25\x8d\xa4\x92\x7f\x1f\x03\x37\xd3\xeb\x9b\xf1\xdd\xf8\xf5\xe8\xe6\x32\xe4\x98\xe2\x77\x92\x7b\x39\xba\x99\x5c\x4e\x57\x8b\xcf\x1f\x6f\xc7\xaf\x57\xec\x50\xc2\x19\x95\x9e\x4e\x7c\x81\xdf\x58\xec\x4c\x3e\x8d\xae\xc7\xab\xf9\xf8\x7a\xfc\x75\xb6\x5a\xce\x47\xb7\x8b\x9b\xd1\x72\x32\xbd\x7d\x35\xda\x5d\x0c\x58\x29\x0c\xf1\x21\x5e\x55\xa2\xc0\xd3\x6a\xb6\x9b\xe9\xf5\xf5\xe4\xf6\xfa\xd5\x1d\x95\xcb\x30\x64\xa2\xb9\xa4\x27\xf1\x3f\x6c\xa5\x3c\x1f\x7d\x59\x5d\x8d\xef\x26\x97\xe3\xc5\xab\x91\xad\xc8\xfd\x2a\xc0\x94\xd1\x5a\x5e\xe9\x41\xf4\xf8\xeb\x72\x3e\x5a\x8d\xe6\xd7\xaf\x47\xab\xbb\x92\x5e\x75\xce\xf7\x72\xcf\x8a\x5f\x2e\x56\x57\x93\x79\x93\xf0\xe3\xd9\xf6\xcf\x6a\x11\x6c\x89\x95\x93\xe4\xee\x33\x8f\xf4\x04\x95\x22\xe2\xe5\x6e\x9a\xd3\x48\x7f\xeb\x65\xd4\x6b\x57\xa9\x4f\xbd\x24\xe8\xd7\xe2\x7b\x07\x7b\x80\xe3\xdd\x43\x26\xb1\xca\xf7\x0e\x8b\x5a\xb9\xbf\x59\x4b\xe5\x3e\x28\x58\xdf\x84\xcc\x37\x81\x50\x8a\x5a\x97\xfa\x76\x5f\xc7\x2c\x7e\xb5\x1c\x6b\x53\xd8\xe4\xe6\xe8\xc6\xee\x1b\xc3\x8e\xfb\xc2\xa3\x28\x5d\xcd\x52\x97\x98\x8e\x82\xd4\x3a\xa1\x56\x73\x74\x74\x6b\xb5\x55\x6c\x36\x8f\xa7\xb0\x9c\x5e\x4d\x6d\x4d\x25\xde\x18\xd8\x10\x15\x50\x19\x60\xfe\x51\x01\xb2\x36\xc5\x35\xc5\x36\x96\xb8\x6b\xb4\xfd\xc6\x0d\xd3\xd9\xcd\x59\xde\x38\xc2\xe5\x7c\x02\xb1\x92\x0f\x3b\x60\x42\x1b\xc2\xb3\x74\x6b\xfb\xe6\xea\x81\x4c\x64\xaa\x74\x16\xb1\xff\xfe\x78\xd6\x87\x95\x63\xdf\x32\x0e\x7c\x0e\x79\x14\xaf\xcb\x0b\xbb\x7c\xb0\x17\x50\xd3\xf1\xba\xdc\xf1\x71\xa0\x8a\x87\x36\xbf\xcf\x1c\xdd\xfc\x84\xc6\xb1\x67\xdb\xd8\x4b\x08\x9d\x3d\xe4\xc1\x0e\xb2\x0f\x64\x53\x31\xb5\xcf\x42\x7d\xe4\x59\x66\xb0\x6a\x6c\xeb\x8a\x89\xbd\xc0\x8e\x6a\xf9\x5b\xc0\xba\xee\x0a\x8e\xdd\x14\xf4\xa2\xae\x43\xec\x8d\x36\xb7\x17\x5d\x02\x8d\x68\xe2\xb8\xb1\x9a\xee\xca\x3a\x66\x78\x28\x85\x79\x59\x2f\xde\xd9\x86\x1f\x6f\xd6\x9b\x0f\x54\x94\x4f\xe8\x19\x49\xcc\x46\x2a\xf6\x5f\xb7\xe6\x6c\xfb\x41\x9f\x31\xd9\x78\xaf\x92\x3f\xf2\x98\x4b\x8e\x1f\x99\x08\x6c\xd5\x7c\xf8\xe1\x8a\x92\x1c\xf3\x02\x8c\xc4\xec\xda\x06\xf5\x23\x27\x9d\x00\xb4\xce\x68\x41\xea\xc4\xff\x03\xa9\xcd\xfd\x5e\xbe\x7a\x51\x7b\x55\xd1\xff\xf1\x8c\x95\x40\xfb\xbc\x6f\x93\xc9\x77\xbc\xd9\x51\x36\x2b\xd9\xf5\x5e\x29\x93\xca\xd7\xc4\x9f\x7e\x72\x3f\x15\x6a\x99\x28\x8a\x95\x99\xf2\x95\x49\xa6\xe1\x14\x95\x5f\x9d\x75\x1f\x49\x9e\x43\xab\x1d\x3c\x95\x47\x7b\xb6\x28\x45\x55\xf0\xd0\xe0\x20\xa7\xbe\x46\x7b\x83\xee\x92\x6a\x0f\x42\x27\x24\x0f\x38\xd3\xd9\x8f\x7b\x62\xe8\xe6\x85\x38\x28\xdc\x25\xd1\xa8\xec\xcc\x93\x19\xf1\x40\x23\x55\x59\xf0\x68\x30\xf5\xa2\x9e\x55\xa4\x1b\x21\x03\xf4\xfc\x7c\xd9\x33\xba\x59\x4b\xd5\x55\x7f\xfb\x16\xf0\xeb\xbc\x82\xcb\x60\x33\xdb\x1f\xba\xe7\x4b\x2f\x1c\x7a\xa2\xbd\x92\x5f\x40\x3e\x87\x0c\xe9\x07\x09\x4b\x1e\x55\xc1\x63\x11\x88\xc4\x6c\xff\x5a\x31\x47\x3e\x1c\x95\x12\x6d\x64\x54\x4c\x04\xe8\x1e\x97\x95\x69\xa8\x3b\x48\x1d\x3a\xb8\xe8\x3a\xb7\x1f\xf4\xc1\xf3\xf2\x35\x2e\xab\x45\x24\x8e\x99\x08\x3b\x8f\xca\xa3\x4a\xf6\xcf\x8b\x7b\x65\x4d\xba\xcf\x6f\x6c\x16\xf6\x79\x0d\xac\x2a\x89\xb4\x60\xb5\x01\xf8\x1d\xb9\xed\x7f\x01\x00\x00\xff\xff\xe5\x70\x08\xbd\xf6\x2a\x00\x00")

func deployDataVirtletDsYamlBytes() ([]byte, error) {
	return bindataRead(
		_deployDataVirtletDsYaml,
		"deploy/data/virtlet-ds.yaml",
	)
}

func deployDataVirtletDsYaml() (*asset, error) {
	bytes, err := deployDataVirtletDsYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "deploy/data/virtlet-ds.yaml", size: 10998, mode: os.FileMode(420), modTime: time.Unix(1522279343, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"deploy/data/virtlet-ds.yaml": deployDataVirtletDsYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"deploy": &bintree{nil, map[string]*bintree{
		"data": &bintree{nil, map[string]*bintree{
			"virtlet-ds.yaml": &bintree{deployDataVirtletDsYaml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

