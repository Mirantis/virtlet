// Code generated by go-bindata. DO NOT EDIT.
// sources:
// deploy/data/virtlet-ds.yaml
package tools

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _deployDataVirtletDsYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x5a\x5b\x73\xe2\x3a\xf2\x7f\xcf\xa7\xe8\x3a\xa9\xfa\xcf\xcc\x83\x43\x32\xf5\x3f\x3b\x73\xa8\xdd\x07\x26\x70\xb2\xd4\x24\x40\x41\x26\x73\xde\x28\x59\x6e\x8c\x16\x59\xf2\x4a\xb2\x13\xf6\xd3\x6f\x49\xbe\xe0\x1b\x84\x5c\x6b\x87\x97\x38\x92\xfa\xa7\xbe\x77\x4b\xb6\xe7\x79\x27\x24\x66\x77\xa8\x34\x93\xa2\x0f\xf8\x60\x50\xd8\x47\xdd\x4b\x2f\x7c\x34\xe4\xe2\x64\xc3\x44\xd0\x87\x21\xc1\x48\x8a\x05\x9a\x93\x08\x0d\x09\x88\x21\xfd\x13\x00\x41\x22\xec\x43\xca\x94\xe1\x68\xf2\xff\x75\x4c\x28\xf6\x61\x93\xf8\xe8\xe9\xad\x36\x18\x9d\xe8\x18\xa9\x5d\x6e\x30\x8a\x39\x31\x68\x9f\x01\xaa\x40\xf6\xd7\x04\xb3\x3f\x4e\x7c\xe4\xba\x58\x01\xa0\x12\x61\x58\x73\x59\x01\x6f\x7f\x6b\xa9\xcd\x04\xcd\xbd\x54\x9b\x3e\x18\x95\x60\x3e\x1e\x08\x3d\x93\x9c\xd1\x6d\x1f\x2e\x79\xa2\x0d\xaa\x3f\x99\xd2\xe6\x27\x33\xeb\x7f\x66\x24\xf9\xc2\x53\x07\x31\x1b\x0f\x81\x69\x07\x00\x46\xc2\xc7\x8b\x4f\x80\x82\xf8\x1c\xe1\xee\x46\xdb\x11\x9d\xa8\x94\xa5\x58\xf0\x01\x54\x0a\x43\x98\x40\x05\x0a\xb5\x21\x6a\x07\xf7\xd1\x48\xf0\x11\xe8\x1a\xe9\x06\x83\x4f\x40\x44\x00\x1f\x3f\x7f\xb2\x20\x39\xa4\x59\x23\x24\x1a\x41\xae\x40\x68\x14\x06\x15\x30\x01\x4c\xb0\x0a\x6c\x45\xbc\xd9\x78\x58\x13\xed\x14\x7c\x29\x8d\x36\x8a\xc4\x10\x2b\x49\x31\x48\x14\x82\x40\x0c\x1c\xa7\x54\x21\x31\x08\xc4\x62\xad\x58\x18\x91\xd8\xa2\x57\xcc\xb3\xb3\x5a\x0e\xa8\x51\xa5\x8c\xe2\x80\x52\x99\x08\x33\xa9\x99\xa5\xdc\x53\x0a\xbe\xb5\xe6\x80\xbb\x5c\x03\xb1\x0c\x34\x48\xe1\xa4\x11\x32\x40\x0d\xf7\xcc\xac\xad\x47\x29\x32\xcf\xcc\xf6\x8f\x42\x5b\xce\xac\x39\x14\x59\xad\xac\xa8\xdb\x9d\x91\x2d\xf5\xa0\x35\x0a\xa0\xf0\xdf\x09\x53\x18\x0c\x13\xc5\x44\xb8\xa0\x6b\x0c\x12\xce\x44\x38\x0e\x85\x2c\x87\x47\x0f\x48\x13\x63\x9d\xb9\x42\x99\x61\x2e\x90\x23\x35\x52\xdd\xa2\x8a\x74\x7d\xda\x83\x88\x18\xba\x1e\x3d\xc4\x0a\xb5\xf3\xff\xfa\xbc\x5d\xb1\xc1\x6d\xbf\x26\x4e\x63\x05\x80\x8c\x51\x11\x23\x55\x1f\xc6\xa2\x35\x99\x12\x9e\x60\x0b\xd6\x02\x37\x74\x6b\xe5\xbe\x2c\xec\x5e\x12\x9c\xc2\xed\x1a\x1b\x4e\x01\x54\xc6\x0c\x75\x01\xf0\x41\xc3\x8a\xe3\x43\x2a\x79\x12\x21\x04\x8a\xa5\xa5\xdf\x9c\x5a\x4f\xb0\x96\x09\x70\x45\x12\x6e\x9c\xfd\x9d\xd5\x78\x12\x32\x01\x01\x53\xce\x31\x51\xe8\x44\xa1\x06\xb3\x26\x3b\x0f\x76\x74\x4c\x39\xdd\xd9\xed\xac\x6b\x61\x00\xfe\x16\x38\xf3\xed\xde\xf0\x7f\x65\x1c\xe0\x03\xd3\xa6\x70\x03\xeb\xad\x27\x85\x94\x59\x78\xc7\x0a\x63\xa2\xd0\xb3\xf6\x28\x55\xc1\x22\x12\x62\x1f\x22\xa6\x88\x30\x4c\xf7\xea\x39\x20\x9f\x9f\x25\x9c\x17\x21\x3c\x5e\x4d\xa4\x99\x29\xb4\xd1\x52\xae\xa2\x32\x8a\x88\x08\x76\x1a\xf6\xa0\x57\xdd\xee\x4c\xaf\xcb\xa9\x4c\x47\x37\xd6\xbf\x75\x95\x20\x63\x72\xf3\x55\x7b\x3b\x4d\x7a\x99\x8e\xb4\x17\x30\x55\xb1\x5e\x64\x89\x67\xc4\xac\xfb\xd0\xcb\xb5\xe9\xd5\x09\x5a\xb8\x2a\x11\x2d\x00\x25\x63\x12\x12\xe7\xb0\xf0\x8d\x65\x6a\x66\x52\x10\xbe\x67\xab\x2a\x46\x81\x1b\x48\xba\x41\xa5\x25\xdd\xec\x21\x4a\x89\xb2\x84\xbd\x6c\xe1\x59\x6d\x65\x01\xc2\x65\xb8\x87\xda\x9a\xb1\x3a\x7b\x0a\x2b\xa9\x32\x57\x61\x22\x74\xbe\x92\x6d\xc1\x99\xdf\xcb\x5d\xa2\xe7\x6c\xa6\x33\x7f\x70\x79\xa1\x66\xf1\x62\xd3\x94\x28\x8f\x33\xff\xc0\xc6\x5e\x73\x49\x29\x34\xa6\x7b\xc8\xaa\x33\x5e\x4b\x0f\x96\xc9\xa6\x83\x75\x17\x1f\x9b\x09\x69\xa2\x98\xd9\xda\x70\xc4\x07\x53\x0d\xde\x58\xb1\x94\x71\x0c\x31\xa8\x25\x63\x00\x14\x69\xdb\xa3\xbe\xff\xf8\x36\x5a\x4e\xa6\xc3\xd1\x72\x32\xb8\x19\x55\x60\x5c\x56\xf8\x53\xc9\xa8\x9e\x18\x56\x0c\x79\x30\xc7\x55\x33\x5d\x54\x6b\x75\x7a\xd1\x98\x74\x44\x99\xa4\xb6\x24\x9e\x59\x8d\xdb\xec\xdd\xe2\xe6\x6e\x3c\xbf\xbd\x1e\xdd\x2e\x87\xe3\xc5\xe0\xdb\xf5\x68\xf9\xfd\xee\xe6\x71\x96\xb2\xf2\x71\x43\xe2\xef\xb8\xed\xe0\xac\xa6\x40\x2f\x5b\xdc\x58\xe2\x12\x68\xc0\xb4\x2d\x7a\xcb\x4d\x1a\x35\xa6\x65\x9c\x39\x7e\x43\x9f\x4d\xa6\x17\xf3\xf1\xf4\x6e\xb9\xf8\x31\x9b\x4d\xe7\xb7\xef\xc6\xb6\x56\x4c\xa6\x4b\x9d\xc4\xb1\x54\xe6\x79\x8c\x0f\xa7\x3f\x27\xd7\xd3\xc1\x70\x39\x9b\x4f\x6f\xa7\x97\xd3\xeb\xf7\xd3\xb9\xbc\x17\x5c\x92\x60\x19\x2b\x69\x24\x95\xfc\x79\x02\x5c\x4f\xaf\xae\x47\x77\xa3\xf7\xe3\x9b\xcb\x90\x63\x8a\xcf\x64\xf7\x72\x70\x3d\xbe\x9c\x2e\x17\x3f\xbe\x4d\x46\xef\xe7\x28\x94\x70\x46\xa5\xa7\x13\x5f\xe0\x13\x1d\x65\x7c\x33\xb8\x1a\x2d\xe7\xa3\xab\xd1\x5f\xb3\xe5\xed\x7c\x30\x59\x5c\x0f\x6e\xc7\xd3\xc9\xbb\xf1\xee\x72\xf6\x52\x61\x88\x0f\xf1\xd2\x28\x22\x34\x77\x95\xe9\x79\xfa\x9f\x0f\x7e\x2e\x87\xa3\xbb\xf1\xe5\x68\xf1\x6e\x12\x28\x72\xbf\x0c\xd0\x76\xaf\xfa\x99\x41\x9a\xa7\xc4\xeb\xe9\xd5\xd5\x78\x72\xf5\xee\x69\x91\xcb\x30\x64\xa2\xb9\xe4\x48\xe6\x33\x07\xaa\x78\xce\x62\x39\x1c\xcf\x9b\x32\xf4\xa1\x87\x86\x16\x35\x30\x2f\xd4\x45\xf3\x49\x5b\x8d\x67\xd9\x1f\x64\x85\xfd\xe8\xa6\xed\x14\xc6\x02\x28\xd1\x08\xf7\xb6\x6f\xfd\x17\x52\x03\x5c\x52\xc2\xcb\x5e\xd1\x21\xd8\xd9\x7b\x22\x8c\x6d\x50\xed\x21\x88\x19\x10\xd2\x80\x5c\xad\x18\x65\x84\xf3\x2d\x90\x94\x30\xee\x0e\x4a\x52\xe0\x2b\xf4\x84\xb9\x20\xc7\xb4\x83\xd5\xde\x41\x6f\x75\x6f\xa5\x7b\x34\x54\x32\x89\x5b\x9d\x43\x63\xb8\x4e\x6a\x5b\x8e\x48\x06\x09\xaf\x79\x65\x46\xd8\x1e\x57\x48\x82\xa9\xe0\xdb\x96\xb1\xab\x90\xf6\xc8\xd7\xc2\x6a\x0c\x1e\x05\x54\xef\x49\x5f\xd2\xa7\xbe\xac\xd5\xea\xa6\x6e\x3a\x1d\xec\x71\xc6\x36\xb5\x6d\x77\x1f\xa1\xf6\x6c\x1f\x8c\x46\x57\x5c\xd6\x9e\x5a\xb8\x0c\xdd\x79\x88\x95\x27\x9d\x35\x2a\x04\x1f\x29\x71\xa7\x74\xb3\x46\x75\xcf\x34\x96\xa7\x9f\x7b\xc6\xb9\x3d\x79\x07\x09\x45\x40\xa5\xa4\xaa\x42\x72\xb6\xb1\x47\x7c\x56\x71\xac\x53\xf8\x91\x9f\xfc\xa5\x3d\x10\x79\xf9\x11\x9d\xae\x89\x0a\x30\x85\x15\xe3\x08\x1f\x32\x1d\xc8\xb0\x97\x46\xba\x47\x56\xc1\x97\xdf\x7d\xdf\xf7\xbe\xe2\x1f\x5f\xbc\x8b\x0b\xfc\xe2\xfd\xf1\xfb\xdf\x2e\xbc\xf3\xcf\xff\xff\xf9\x9c\xd0\xf3\xf3\xf3\xf3\xcf\x3d\xca\x94\x92\xda\x4b\xa3\xe5\xf9\x19\x97\xe1\x87\x3e\x4c\x24\xe8\x84\xae\x33\x44\xa9\xca\x53\xdc\xb6\xdd\x88\x47\xda\xdb\x7f\x02\xa8\xb0\xd2\x3e\x37\xe4\xca\x7c\x9c\xba\x6d\xb4\xa7\x74\xf2\xcf\xe9\xc5\x6d\x04\x30\x81\x5a\xcf\x94\xf4\xb1\x4a\x82\x0f\xbb\x3b\xa3\xec\xd7\x4a\x15\x19\x8b\x3d\x9f\x89\x5e\x25\x55\x64\xa3\x1e\x6d\x0c\x68\x49\x89\x01\x0f\x7e\x4c\xc6\x7f\xf5\x9b\x0e\xd8\xab\x3a\x9c\xa7\x24\xfc\xdd\x4a\xd6\x13\x09\xe7\x8d\x24\xdb\x79\xf2\xfd\x5f\x4f\xb2\xc7\x64\xcf\xd7\x4b\x33\xa7\x59\xf2\x73\xd7\x15\xd5\xcc\x0a\x44\x61\x79\x45\x04\xfe\x16\x74\x12\xa3\x8a\x98\xf8\x05\x93\xf2\xaf\x98\x3c\xeb\x28\x89\x76\x3c\xd8\x30\x73\xb7\x23\x4a\xa0\x41\x5d\x5e\x94\xe4\x37\x24\xbd\xcc\x75\x7a\x76\x59\x6b\xa3\x23\x6e\x61\xba\xe5\xce\x37\xe9\xc5\x32\x68\x9b\xd6\xa2\xda\x89\xce\xdb\x9c\x63\x8a\xdc\xf3\xf3\x65\x75\x45\x47\x07\xd6\xe4\xd4\x0d\x7b\xf6\xd9\xab\xf4\xe2\xed\x04\xec\xa4\x79\x9c\x97\x9a\x36\x7e\xa5\x64\x6a\x9d\x31\x57\x95\xbb\xb9\x3a\x90\x3d\x2b\xea\x7e\xbb\x3b\xc5\x34\xd2\x4f\xed\x1d\xdf\x3b\x9e\x5f\x5a\xd3\x8f\xbd\x5b\xdb\x97\x2d\x0f\xe7\xd9\x4c\x63\x95\x9b\x6d\x8b\x5a\x69\xb7\x56\x52\xb9\xab\x63\x7b\x9a\x83\xec\x34\x07\x84\x52\xd4\xba\xb4\xb7\x7b\x0f\x62\xf1\xab\x8e\xdb\xe6\xb0\x29\xcd\x41\xc2\xee\x06\xbf\xa3\xbd\x3f\x88\xd2\x55\x56\xba\xd4\x74\x10\xa4\x56\x33\x5a\x65\xe4\x20\x69\xb5\xa8\x36\xcb\xec\x29\xdc\x4e\x87\xd3\x3e\x04\x52\x7c\x30\x60\xbb\x4d\x2a\x03\xcc\xaf\x8f\x21\x4b\xe8\xae\x7d\xb0\x89\xc6\x75\xbd\x3b\xc2\x35\xd3\x59\xa3\x9b\x97\x58\xb8\x9c\x8f\x6d\xd3\xfb\xb0\x05\x26\xb4\x21\x3c\x4b\x4f\xb6\xc3\xa8\x6e\xc8\x44\x66\x4a\xe7\x11\xbb\x37\x4d\x67\xc7\x88\x72\xe8\xd6\x7a\xcf\xc5\xf7\xa3\x78\x5d\x51\xd8\x15\x83\x47\x01\x35\x03\xaf\x2b\x1c\x1f\x07\xaa\x44\x68\xf3\x26\xfe\x20\xf1\x0b\x4a\xec\x91\x05\xf6\x28\x25\x74\x56\xdb\xbd\xb5\xf6\x18\xc8\xa6\x61\x6a\x2f\x00\x8e\xd1\x67\x59\x59\xab\xb9\xad\x2b\x27\x1e\x05\x76\xd0\xca\x4f\x01\xeb\xea\xaa\x0e\xf5\x54\x47\x71\xd7\xa1\xf6\x46\x43\x70\x14\x5f\x02\x8d\x68\xe2\xb8\xb1\x9a\xed\xca\xcb\xae\xfe\xbe\x12\xe6\x65\x5d\x4b\x67\xc3\x72\xb8\xad\x69\x7e\x8a\xa0\x7c\x42\xcf\x48\x62\xd6\x52\xb1\xff\xb8\x35\x67\x9b\xaf\xfa\x8c\xc9\xc6\x97\x09\xf9\xeb\xfc\xb9\xe4\xf8\x8d\x89\x80\x89\xf0\xc0\x27\x0a\x4a\x72\xcc\x6f\xe9\x48\xcc\xae\x6c\x52\x3f\xb0\xd3\x09\x40\x6b\x8f\x16\xa4\x4e\x7c\x7b\xec\xd2\xfd\x13\x2f\x5f\xbd\xa8\xbd\x3f\x3f\xfe\x33\x09\xab\x81\xf6\x7e\x4f\xd3\xc9\x33\xbe\xce\x50\xb6\x2a\xd9\xf5\x5e\xa9\x93\xbc\x36\x7b\xf0\xdb\x6f\xee\x41\xa1\x96\x89\xa2\x58\x8e\x97\xdf\x12\xe8\x7c\xc0\xbd\xf1\x77\xcf\x29\x2a\x7f\xb7\xce\xdd\x6c\xe4\xff\x84\x68\x5e\xc3\xca\x1d\x32\x96\xec\x78\xb6\x49\x45\x55\xc8\xd4\x90\x28\x97\xa7\x26\x4d\x43\x96\x92\xfb\x8c\x5d\xfb\x97\x33\x9d\x3d\xdc\x13\x43\xd7\x6f\x24\x41\x11\x3e\x89\x46\x65\x67\x5e\x2c\x88\x67\x7b\x7c\x95\x25\x93\x86\x50\x6f\x1a\x69\x45\xf9\xb1\x0e\xe1\xf9\xf9\xb2\x57\x0c\xbb\x96\xa9\xab\xf1\xf7\x14\xf0\xab\xbc\xa3\xcb\x60\xb3\x58\xe8\x67\x6e\xfc\xb6\xa9\x28\xda\x19\xf9\x0d\xf4\xb3\xcf\x91\x7e\x91\x34\xe5\x51\x15\xec\x77\x7a\x12\xb3\xdd\x17\x6a\x39\x66\x57\x20\x24\xda\xc8\xa8\x18\x0c\xd0\x7d\x4a\x94\x97\xa2\x4a\x2c\xe4\xc9\xa9\xbd\x4d\x71\xda\xdc\x7c\xd5\x1d\xe8\xf9\xac\xab\x63\x11\x89\x63\x26\x42\x5d\x9d\x28\x3d\xb4\x98\xa9\x6c\x59\xe6\x92\x37\x8f\xc3\x9a\x3e\x5f\xdf\xbd\x2c\xec\xeb\xba\x54\xe3\xd3\x86\x4e\xc0\x67\x54\xb7\xff\x06\x00\x00\xff\xff\x19\x0f\xf9\x0a\xe2\x28\x00\x00")

func deployDataVirtletDsYamlBytes() ([]byte, error) {
	return bindataRead(
		_deployDataVirtletDsYaml,
		"deploy/data/virtlet-ds.yaml",
	)
}

func deployDataVirtletDsYaml() (*asset, error) {
	bytes, err := deployDataVirtletDsYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "deploy/data/virtlet-ds.yaml", size: 10466, mode: os.FileMode(420), modTime: time.Unix(1522279343, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"deploy/data/virtlet-ds.yaml": deployDataVirtletDsYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"deploy": &bintree{nil, map[string]*bintree{
		"data": &bintree{nil, map[string]*bintree{
			"virtlet-ds.yaml": &bintree{deployDataVirtletDsYaml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

