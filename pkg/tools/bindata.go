// Code generated by go-bindata. DO NOT EDIT.
// sources:
// deploy/data/virtlet-ds.yaml
package tools

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _deployDataVirtletDsYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x5a\x5d\x73\xe2\x3a\xd2\xbe\xcf\xaf\xe8\x3a\xa9\x7a\x67\xe6\xc2\x71\x32\xf5\x9e\x9d\x39\xd4\xee\x45\x26\x70\xb2\xd4\x24\x40\x41\x92\x39\x77\x94\x2c\x37\x46\x8b\x2c\x79\x25\xd9\x09\xfb\xeb\xb7\x24\x1b\xe3\x2f\x08\x61\x92\xd4\x0e\x37\x21\x92\xfa\x51\x7f\x77\x4b\xc8\xf3\xbc\x13\x92\xb0\x07\x54\x9a\x49\xd1\x03\x92\x24\xda\xcf\x2e\x4e\x56\x4c\x84\x3d\xe8\x13\x8c\xa5\x98\xa1\x39\x89\xd1\x90\x90\x18\xd2\x3b\x01\x10\x24\xc6\x1e\x64\x4c\x19\x8e\xa6\xf8\x5f\x27\x84\x62\x0f\x56\x69\x80\x9e\x5e\x6b\x83\xf1\x89\x4e\x90\xda\xe5\x1a\x39\x52\x23\x95\xfd\x0e\x10\x13\x43\x97\x37\x24\x40\xae\xf3\x01\x00\x95\x0a\xc3\xea\x90\x06\xe3\x84\x13\x83\x05\x4d\x65\x73\xfb\x69\x32\x60\x3f\xbc\x06\xd9\x09\x0a\xb0\x61\xc9\x7e\x96\x52\x9b\x11\x9a\x47\xa9\x56\x3d\x30\x2a\xc5\x62\x3c\x14\x7a\x22\x39\xa3\xeb\x1e\x5c\xf1\x54\x1b\x54\x7f\x32\xa5\xcd\x0f\x66\x96\xff\xcc\x49\x8a\x85\xa7\x0e\x62\x32\xec\x03\xd3\x0e\x00\x8c\x84\x8f\x17\x9f\x00\x05\x09\x38\xc2\xc3\xad\xb6\x23\x3a\x55\x19\xcb\x70\xc3\x07\x50\x29\x0c\x61\x02\x15\x28\xd4\x86\xa8\x2d\xdc\x47\x23\x21\x40\xa0\x4b\xa4\x2b\x0c\x3f\x01\x11\x21\x7c\xfc\xfc\xc9\x82\x14\x90\x66\x89\x90\x6a\x04\xb9\x00\xa1\x51\x18\x54\xc0\x04\x30\xc1\x2a\xb0\x15\xf1\x26\xc3\x7e\x4d\xb4\x53\x08\xa4\x34\xda\x28\x92\x40\xa2\x24\xc5\x30\x55\x08\x02\x31\x74\x9c\x52\x85\xc4\x20\x10\x8b\xb5\x60\x51\x4c\x12\x8b\x5e\x31\xe9\xd6\xd2\x05\xa0\x46\x95\x31\x8a\x97\x94\xca\x54\x98\x51\xcd\x2c\xe5\x9e\x52\xf0\xb5\x35\x07\x3c\x14\x1a\x48\x64\xa8\x41\x0a\x27\x8d\x90\x21\x6a\x78\x64\x66\x09\xf8\x64\x14\x99\xe6\x66\xfb\xc7\x46\x5b\xce\xac\x05\x14\x59\x2c\xac\xa8\xeb\xad\x91\x2d\xf5\x65\x6b\x14\x40\xe1\xbf\x53\xa6\x30\xec\xa7\x8a\x89\x68\x46\x97\x18\xa6\x9c\x89\x68\x18\x09\x59\x0e\x0f\x9e\x90\xa6\xc6\x7a\x7d\x85\x32\xc7\x9c\x15\x2e\x7b\x87\x2a\xd6\xf5\x69\x2f\xf7\xe0\xc1\x53\xa2\x50\xdb\x98\x69\xcc\xdb\x15\x2b\x5c\xf7\x6a\xe2\x34\x56\x00\xc8\x04\x15\xb1\x31\x01\x43\xd1\x9a\xcc\x08\x4f\xb1\x05\x6b\x81\x1b\xba\xb5\x72\x5f\x6d\xec\x5e\x12\x9c\xc2\xdd\x12\x1b\x4e\x01\x54\x26\x0c\xf5\x06\xe0\x83\x86\x05\xc7\xa7\x4c\xf2\x34\x46\x08\x15\xcb\x4a\xbf\x39\xb5\x9e\x60\x2d\x13\xe2\x82\xa4\xdc\x38\xfb\x3b\xab\xf1\x34\x62\x02\x42\xa6\x9c\x63\xa2\xd0\xa9\x42\x0d\x66\x49\xb6\x1e\xec\xe8\x98\x72\xba\xb3\xdb\x59\xd7\xc2\x10\x82\x35\x70\x16\xd8\xbd\xe1\xff\xca\x38\xc0\x27\xa6\xcd\xc6\x0d\xac\xb7\x9e\x6c\xa4\xcc\xc3\x3b\x51\x98\x10\x85\x9e\xb5\x47\xa9\x0a\x16\x93\x08\x7b\x10\x33\x45\x84\x61\xda\xaf\xe7\x80\x62\x7e\x92\x72\xbe\x09\xe1\xe1\x62\x24\xcd\x44\xa1\x8d\x96\x72\x15\x95\x71\x4c\x44\xb8\xd5\xb0\x07\x7e\x75\xbb\x33\xbd\x2c\xa7\x72\x1d\xdd\x5a\xff\xd6\x55\x82\x9c\xc9\xd5\x57\xed\x6d\x35\xe9\xe5\x3a\xd2\x5e\xc8\x54\xc5\x7a\xb1\x25\x9e\x10\xb3\xec\x81\x5f\x68\xd3\xab\x13\xb4\x70\x55\x2a\x5a\x00\x4a\x26\x24\x22\xce\x61\xe1\x1b\xcb\xd5\xcc\xa4\x20\x7c\xc7\x56\x55\x8c\x0d\x6e\x28\xe9\x0a\x95\x96\x74\xb5\x83\x28\x23\xca\x12\xfa\xf9\xc2\xb3\xda\xca\x0d\x08\x97\xd1\x0e\x6a\x6b\xc6\xea\xec\x29\x2c\xa4\xca\x5d\x85\x89\xc8\xf9\x4a\xbe\x05\x67\x81\x5f\xb8\x84\xef\x6c\xa6\x73\x7f\x70\x79\xa1\x66\xf1\xcd\xa6\x19\x51\x1e\x67\xc1\x9e\x8d\xbd\xe6\x92\x52\x68\xcc\x76\x90\x55\x67\xbc\x96\x1e\x2c\x93\x4d\x07\xeb\x2e\x3e\x36\x13\xd2\x54\x31\xb3\xb6\xe1\x88\x4f\xa6\x1a\xbc\x89\x62\x19\xe3\x18\x61\x58\x4b\xc6\x00\x28\xb2\xb6\x47\x7d\xbf\xff\x36\x98\x8f\xc6\xfd\xc1\x7c\x74\x79\x3b\xa8\xc0\xb8\xac\xf0\xa7\x92\x71\x3d\x31\x2c\x18\xf2\x70\x8a\x8b\x66\xba\xa8\x16\xf5\xec\xa2\x31\xe9\x88\x72\x49\x6d\x49\x3c\xb3\x1a\xb7\xd9\xbb\xc5\xcd\xc3\x70\x7a\x77\x33\xb8\x9b\xf7\x87\xb3\xcb\x6f\x37\x83\xf9\xf7\x87\xdb\xe7\x59\xca\xcb\xc7\x2d\x49\xbe\xe3\xba\x83\xb3\x9a\x02\xbd\x7c\x71\x63\x89\x4b\xa0\x21\xd3\xb6\xe8\xcd\x57\x59\xdc\x98\x96\x49\xee\xf8\x0d\x7d\x36\x99\x9e\x4d\x87\xe3\x87\xf9\xec\x7e\x32\x19\x4f\xef\xde\x8d\x6d\xad\x98\xcc\xe6\x3a\x4d\x12\xa9\xcc\x71\x8c\xf7\xc7\x3f\x46\x37\xe3\xcb\xfe\x7c\x32\x1d\xdf\x8d\xaf\xc6\x37\xef\xa7\x73\xf9\x28\xb8\x24\xe1\x3c\x51\xd2\x48\x2a\xf9\x71\x02\xdc\x8c\xaf\x6f\x06\x0f\x83\xf7\xe3\x9b\xcb\x88\x63\x86\x47\xb2\x7b\x75\x79\x33\xbc\x1a\xcf\x67\xf7\xdf\x46\x83\xf7\x73\x14\x4a\x38\xa3\xd2\xd3\x69\x20\xf0\x85\x8e\x32\xbc\xbd\xbc\x1e\xcc\xa7\x83\xeb\xc1\x5f\x93\xf9\xdd\xf4\x72\x34\xbb\xb9\xbc\x1b\x8e\x47\xef\xc6\xbb\xcb\xd9\x73\x85\x11\x3e\x25\x73\xa3\x88\xd0\xdc\x55\xa6\xe3\xf4\x3f\xbd\xfc\x31\xef\x0f\x1e\x86\x57\x83\xd9\xbb\x49\xa0\xc8\xe3\x3c\x44\xdb\xbd\xea\x23\x83\xb4\x48\x89\x37\xe3\xeb\xeb\xe1\xe8\xfa\xdd\xd3\x22\x97\x51\xc4\x44\x73\xc9\xa1\x1e\x3f\xb9\x9f\xdf\x8e\xfb\xef\x18\xa1\x34\x49\xbd\x58\x86\xc7\x86\x68\xee\xf1\x15\x57\x9f\xcd\xfb\xc3\x69\x93\xfb\x1e\xf8\x68\xe8\xa6\x68\x17\x9d\xc5\xa6\x5b\xa6\xad\x4e\xb9\x6c\x68\xf2\x4e\xe4\xe0\x2e\xf3\x14\x86\x02\x28\xd1\x08\x8f\xb6\xd1\xfe\x17\x52\x03\x5c\x52\xc2\xcb\xe6\xd6\x21\xd8\xd9\x47\x22\x8c\xed\xa8\xed\xa9\x8d\x19\x10\xd2\x80\x5c\x2c\x18\x65\x84\xf3\x35\x90\x8c\x30\xee\x4e\x76\x52\xe0\x2b\x34\xb1\x85\x20\x87\xf4\xaf\xd5\x66\x47\xaf\xb5\xbf\xd0\x3e\x8d\x94\x4c\x93\x56\xab\xd3\x18\xae\x93\xda\x1e\x29\x96\x61\xca\x6b\x61\x94\x13\xb6\xc7\x15\x92\x70\x2c\xf8\xba\x65\xec\x2a\xa4\x3d\xa3\xb6\xb0\x1a\x83\x07\x01\xd5\x9b\xe8\x9f\x69\xac\x7f\xae\x37\xec\xa6\x6e\x3a\x1d\xec\x70\xc6\x36\xb5\xed\xcf\x9f\xa1\xf6\x6c\xe3\x8e\x46\x57\x5c\xd6\x1e\xb3\xb8\x8c\xdc\x01\x8e\x95\x47\xb3\x25\x2a\x84\x00\x29\x71\xd7\x0a\x66\x89\xea\x91\x69\x2c\x8f\x6b\x8f\x8c\x73\x48\x94\x0c\x53\x8a\x80\x4a\x49\x55\x85\xe4\x6c\x85\x60\x96\xac\xe2\x58\xa7\x70\x5f\x5c\x55\x48\x7b\x82\xf3\x8a\x3b\x05\xba\x24\x2a\xc4\x0c\x16\x8c\x23\x7c\xc8\x75\x20\x23\x3f\x8b\xb5\x4f\x16\xe1\x97\xdf\x83\x20\xf0\xbe\xe2\x1f\x5f\xbc\x8b\x0b\xfc\xe2\xfd\xf1\xfb\xdf\x2e\xbc\xf3\xcf\xff\xff\xf9\x9c\xd0\xf3\xf3\xf3\xf3\xcf\x3e\x65\x4a\x49\xed\x65\xf1\xfc\xfc\x8c\xcb\xe8\x43\x0f\x46\x12\x74\x4a\x97\x39\xa2\x54\xe5\xb1\x73\xdd\x3e\x39\xc4\xda\xdb\x7d\x64\xa9\xb0\xd2\x3e\xe8\x14\xca\x7c\x9e\xba\x6d\xb4\x97\x1c\x3d\x8e\x39\x3c\xd8\x08\x60\x02\xb5\x9e\x28\x19\x60\x95\x04\x9f\xb6\x97\x5c\xf9\xa7\x95\x2a\x72\x16\xfd\x80\x09\xbf\x92\x2a\xf2\x51\x8f\x36\x06\xb4\xa4\xc4\x80\x07\xf7\xa3\xe1\x5f\xbd\xa6\x03\xfa\x55\x87\xf3\x94\x84\xbf\x5b\xc9\x7c\x91\x72\xde\x48\xb2\x9d\x47\xf5\xff\xf5\x24\x7b\x48\xf6\x7c\xbd\x34\x73\x9a\x27\x3f\x77\xbf\x52\xcd\xac\x40\x14\x96\x77\x5a\x10\xac\x41\xa7\x09\xaa\x98\x89\x5f\x30\x29\xff\x8a\xc9\xb3\x8e\x92\x6a\xc7\x83\x0d\x33\x77\x9d\xa3\x04\x1a\xd4\xe5\xcd\x4e\x71\xa5\xe3\xe7\xae\xe3\xdb\x65\xad\x8d\x0e\xb8\x36\xea\x96\xbb\xd8\xc4\x4f\x64\xd8\x36\xad\x45\xb5\x13\x9d\xd7\x4f\x87\x14\xb9\xe3\xf3\x65\x75\x45\x47\x07\xd6\xe4\xd4\x0d\x7b\xf6\xbb\x57\x39\x3c\xb4\x13\xb0\x93\xe6\x79\x5e\x6a\xda\xf8\x95\x92\xa9\x75\xc6\x42\x55\xee\xaa\x6d\x4f\xf6\xac\xa8\xfb\xed\x2e\x41\xb3\x58\xbf\xb4\x77\x7c\xef\x78\xfe\xd9\x9a\x7e\xe8\x65\xe0\xae\x6c\xb9\x3f\xcf\xe6\x1a\xab\x5c\xc5\x5b\xd4\x4a\xbb\xb5\x90\xca\xdd\x75\xdb\xe3\x27\xe4\xc7\x4f\x20\x94\xa2\xd6\xa5\xbd\xdd\x0f\x37\x16\xbf\xea\xb8\x6d\x0e\x9b\xd2\xec\x25\xec\x6e\xf0\x3b\xda\xfb\xbd\x28\x5d\x65\xa5\x4b\x4d\x7b\x41\x6a\x35\xa3\x55\x46\xf6\x92\x56\x8b\x6a\xb3\xcc\x9e\xc2\xdd\xb8\x3f\xee\x41\x28\xc5\x07\x03\xb6\xdb\xa4\x32\xc4\xe2\xbe\x1b\xf2\x84\xee\xda\x07\x9b\x68\x5c\xd7\xbb\x25\x5c\x32\x9d\x37\xba\x45\x89\x85\xab\xe9\xd0\x36\xbd\x4f\x6b\x60\x42\x1b\xc2\xf3\xf4\x64\x3b\x8c\xea\x86\x4c\xe4\xa6\x74\x1e\xb1\xfd\x69\xec\xec\x10\x51\xf6\x5d\xb3\xef\xb8\xa9\x7f\x16\xaf\x2b\x0a\xbb\x62\xf0\x20\xa0\x66\xe0\x75\x85\xe3\xf3\x40\x95\x08\x6d\xfe\x74\xb0\x97\xf8\x27\x4a\xec\x81\x05\xf6\x20\x25\x74\x56\xdb\x9d\xb5\xf6\x10\xc8\xa6\x61\x6a\xbf\x58\x1c\xa2\xcf\xb2\xb2\x56\x73\x5b\x57\x4e\x3c\x08\x6c\xaf\x95\x5f\x02\xd6\xd5\x55\xed\xeb\xa9\x0e\xe2\xae\x43\xed\x8d\x86\xe0\x20\xbe\x04\x1a\xd1\xc4\x71\x63\x35\xdb\x95\xd7\x5c\xbd\x5d\x25\xcc\xcb\xbb\x96\xce\x86\x65\x7f\x5b\xd3\x7c\x64\xa1\x02\x42\xcf\x48\x6a\x96\x52\xb1\xff\xb8\x35\x67\xab\xaf\xfa\x8c\x49\x3f\xbb\x08\xd0\x90\xcd\xf3\x8b\xe2\xfd\xc1\x54\x72\xfc\xc6\x44\xc8\x44\xb4\xe7\x1d\x86\x92\x1c\x8b\xfb\x39\x92\xb0\x6b\x9b\xd4\xf7\xec\x74\x02\xd0\xda\xa3\x05\xa9\xd3\xc0\x1e\xbb\x74\xef\xc4\x2b\x56\xcf\x6a\x3f\xf8\x1f\xfe\x16\xc4\x6a\xa0\xbd\xdf\xcb\x74\x72\xc4\x13\x14\x65\xab\x92\x5d\xef\x95\x3a\x29\x6a\xb3\x07\xbf\xfd\xe6\xbe\x28\xd4\x32\x55\x14\xcb\xf1\xf2\xf1\x83\x2e\x06\xdc\x13\x05\xf7\x3d\x43\x15\x6c\xd7\xb9\x9b\x8d\xe2\x9f\x08\xcd\x6b\x58\xb9\x43\xc6\x92\x1d\xcf\x36\xa9\xa8\x36\x32\x35\x24\x2a\xe4\xa9\x49\xd3\x90\xa5\xe4\x3e\x67\xd7\xfe\xe5\x4c\xe7\x5f\x1e\x89\xa1\xcb\x37\x92\x60\x13\x3e\xa9\x46\x65\x67\x7e\x5a\x10\xcf\xf6\xf8\x2a\x4f\x26\x0d\xa1\xde\x34\xd2\x36\xe5\xc7\x3a\x84\x17\x14\xcb\x5e\x31\xec\x5a\xa6\xae\xc6\xdf\x4b\xc0\xaf\x8b\x8e\x2e\x87\xcd\x63\xa1\x97\xbb\xf1\xdb\xa6\xa2\x78\x6b\xe4\x37\xd0\xcf\x2e\x47\xfa\x45\xd2\x94\x47\x55\xb8\xdb\xe9\x49\xc2\xf0\xc9\xa0\x70\x4f\x8a\x0a\xcc\xae\x40\x48\xb5\x91\xf1\x66\x30\x44\xf7\xf6\xa9\x28\x45\x95\x58\x28\x92\x53\x7b\x9b\xcd\x69\x73\xf5\x55\x77\xa0\x17\xb3\xae\x8e\xc5\x24\x49\x98\x88\x74\x75\xa2\xf4\xd0\xcd\x4c\x65\xcb\x32\x97\xbc\x79\x1c\xd6\xf4\xf9\xfa\xee\x65\x61\x5f\xd7\xa5\x1a\x6f\x31\x3a\x01\x8f\xa8\x6e\xff\x0d\x00\x00\xff\xff\xaa\x8d\x59\x1e\xbc\x29\x00\x00")

func deployDataVirtletDsYamlBytes() ([]byte, error) {
	return bindataRead(
		_deployDataVirtletDsYaml,
		"deploy/data/virtlet-ds.yaml",
	)
}

func deployDataVirtletDsYaml() (*asset, error) {
	bytes, err := deployDataVirtletDsYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "deploy/data/virtlet-ds.yaml", size: 10684, mode: os.FileMode(420), modTime: time.Unix(1522279343, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"deploy/data/virtlet-ds.yaml": deployDataVirtletDsYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"deploy": &bintree{nil, map[string]*bintree{
		"data": &bintree{nil, map[string]*bintree{
			"virtlet-ds.yaml": &bintree{deployDataVirtletDsYaml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

