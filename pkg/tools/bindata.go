// Code generated by go-bindata. DO NOT EDIT.
// sources:
// deploy/data/virtlet-ds.yaml
package tools

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _deployDataVirtletDsYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x5a\xdd\x6f\xdb\x38\x12\x7f\xcf\x5f\x31\x68\x80\xeb\x16\x38\xc5\x49\x71\x7b\xed\x1a\x77\x0f\x69\xec\x0d\x8c\x26\xb6\x61\x27\xd9\x7d\x33\x28\x6a\x2c\xf3\x4c\x91\x3a\x92\x52\xe2\xfb\xeb\x0f\xa4\x3e\xac\x2f\x3b\x4e\x9a\x18\xdd\xbc\xd4\x25\x39\xc3\xf9\xe6\x6f\x28\x7a\x9e\x77\x42\x62\xf6\x80\x4a\x33\x29\xfa\x40\xe2\x58\xf7\xd2\x8b\x93\x35\x13\x41\x1f\x06\x04\x23\x29\xe6\x68\x4e\x22\x34\x24\x20\x86\xf4\x4f\x00\x04\x89\xb0\x0f\x29\x53\x86\xa3\xc9\xff\xaf\x63\x42\xb1\x0f\xeb\xc4\x47\x4f\x6f\xb4\xc1\xe8\x44\xc7\x48\xed\x72\x8d\x1c\xa9\x91\xca\xfe\x06\x88\x88\xa1\xab\x1b\xe2\x23\xd7\xd9\x00\x80\x4a\x84\x61\x75\x96\x06\xa3\x98\x13\x83\x39\x4d\x65\x73\xfb\xd7\x14\xc0\xfe\xf1\x1a\xcb\x4e\xa6\x00\x85\x48\xf6\x6f\x25\xb5\x19\xa3\x79\x94\x6a\xdd\x07\xa3\x12\xcc\xc7\x03\xa1\xa7\x92\x33\xba\xe9\xc3\x15\x4f\xb4\x41\xf5\x3b\x53\xba\xd8\xe6\xd4\xd1\x4d\x47\x03\x60\xda\x51\x81\x91\xf0\xcb\xc5\x27\x40\x41\x7c\x8e\xf0\x70\xab\xed\x88\x4e\x54\xca\x52\x2c\x36\x07\x2a\x85\x21\x4c\xa0\x02\x85\xda\x10\xb5\x65\xf7\x8b\x91\xe0\x23\xd0\x15\xd2\x35\x06\x9f\x80\x88\x00\x7e\xf9\xfc\xc9\x32\xc9\x59\x9a\x15\x42\xa2\x11\xe4\x12\x84\x46\x61\x50\x01\x13\xc0\x04\xab\xb0\xad\xe8\x34\x1d\x0d\x6a\xfa\x9c\x82\x2f\xa5\xd1\x46\x91\x18\x62\x25\x29\x06\x89\x42\x10\x88\x81\x93\x94\x2a\x24\x06\x81\x58\x5e\x4b\x16\x46\x24\xb6\xdc\x2b\x7e\xdc\xba\x37\x67\xa8\x51\xa5\x8c\xe2\x25\xa5\x32\x11\x66\x5c\xf3\x45\xb9\xa7\x14\x7c\x63\x7d\x00\x0f\xb9\x05\x62\x19\x68\x90\xc2\x69\x23\x64\x80\x1a\x1e\x99\x59\x01\x3e\x19\x45\x66\x99\xaf\xfe\x5d\x58\xcb\xf9\x32\x67\x45\x96\x4b\xab\xea\x66\xeb\x59\x4b\x7d\xd9\x1a\x05\x50\xf8\xdf\x84\x29\x0c\x06\x89\x62\x22\x9c\xd3\x15\x06\x09\x67\x22\x1c\x85\x42\x96\xc3\xc3\x27\xa4\x89\xb1\xa1\x5e\xa1\xcc\x78\xce\xf3\x38\xbd\x43\x15\xe9\xfa\xb4\x97\x85\xed\xf0\x29\x56\xa8\x6d\xa2\x34\xe6\xed\x8a\x35\x6e\xfa\x35\x75\x1a\x2b\x00\x64\x8c\x8a\xd8\x44\x80\x91\x68\x4d\xa6\x84\x27\xd8\x62\x6b\x19\x37\x6c\x6b\xf5\xbe\x2a\xfc\x5e\x12\x9c\xc2\xdd\x0a\x1b\x41\x01\x54\xc6\x0c\x75\xc1\xe0\xa3\x86\x25\xc7\xa7\x54\xf2\x24\x42\x08\x14\x4b\xcb\xb8\x39\xb5\x91\x60\x3d\x13\xe0\x92\x24\xdc\x38\xff\x3b\xaf\xf1\x24\x64\x02\x02\xa6\x5c\x60\xa2\xd0\x89\x42\x0d\x66\x45\xb6\x11\xec\xe8\x98\x72\xb6\xb3\xdb\xd9\xd0\xc2\x00\xfc\x0d\x70\xe6\xdb\xbd\xe1\x6f\x65\x1e\xe0\x13\xd3\xa6\x08\x03\x1b\xad\x27\x85\x96\x59\x4e\xc7\x0a\x63\xa2\xd0\xb3\xfe\x28\x4d\xc1\x22\x12\x62\x1f\x22\xa6\x88\x30\x4c\xf7\xea\x89\x9f\xcf\x4f\x13\xce\x8b\xbc\x1d\x2d\xc7\xd2\x4c\x15\xda\x6c\x29\x57\x51\x19\x45\x44\x04\x5b\x0b\x7b\xd0\xab\x6e\x77\xa6\x57\xe5\x54\x66\xa3\x5b\x1b\xdf\xba\x4a\x90\x09\xb9\xfe\xaa\xbd\xad\x25\xbd\xcc\x46\xda\x0b\x98\xaa\x78\x2f\xb2\xc4\x53\x62\x56\x7d\xe8\xe5\xd6\xf4\xea\x04\x2d\xbe\x2a\xa9\x86\xc5\x29\x0c\xa4\xf8\x68\x80\x04\x01\x7c\xc8\xb8\x29\x19\x93\x90\xb8\xe8\x85\x6f\x2c\xb3\x39\x93\x82\xf0\x0f\x7f\x07\x66\xe0\x91\x71\x0e\x9c\xd0\x75\xb6\x39\xa0\x30\x6a\xb3\x43\xa4\xea\x5e\xc5\xfe\x81\xa4\x6b\x54\x5a\xd2\xf5\x0e\xa2\x94\x28\x4b\xd8\xcb\x16\x9e\xd5\x56\x16\x4c\xb8\x0c\x77\x50\x5b\x77\x57\x67\x4f\x61\x29\x55\x16\x52\x4c\x84\x2e\xa6\xb2\x2d\x38\xf3\x7b\x79\xe8\xf4\x9c\x6f\x75\x16\x37\xae\x7e\xd4\x22\xa3\xd8\x34\x25\xca\xe3\xcc\xdf\xb3\xb1\xd7\x5c\x52\x2a\x8d\xe9\x0e\xb2\xea\x8c\xd7\xb2\x83\x15\xb2\x19\x88\xdd\x27\x93\xad\x98\x34\x51\xcc\x6c\x6c\xda\xe2\x93\xa9\x26\x79\xac\x58\xca\x38\x86\x18\xd4\x8a\x36\x00\x8a\xb4\x1d\x79\xdf\xef\xbf\x0d\x17\xe3\xc9\x60\xb8\x18\x5f\xde\x0e\x2b\x6c\x5c\xf5\xf8\x5d\xc9\xa8\x5e\x40\x96\x0c\x79\x30\xc3\x65\xb3\xac\x54\x4f\xfc\xf4\xa2\x31\xe9\x88\x32\x4d\xed\x79\x79\x66\x2d\x6e\xab\x7c\x4b\x9a\x87\xd1\xec\xee\x66\x78\xb7\x18\x8c\xe6\x97\xdf\x6e\x86\x8b\xef\x0f\xb7\xcf\x8b\x94\x1d\x33\xb7\x24\xfe\x8e\x9b\x0e\xc9\x6a\x06\xf4\xb2\xc5\x8d\x25\xae\xd0\x06\x4c\xdb\xc3\x71\xb1\x4e\xa3\xc6\xb4\x8c\xb3\x9c\x68\xd8\xb3\x29\xf4\x7c\x36\x9a\x3c\x2c\xe6\xf7\xd3\xe9\x64\x76\x77\x34\xb1\xb5\x62\x32\x5d\xe8\x24\x8e\xa5\x32\xaf\x13\x7c\x30\xf9\x63\x7c\x33\xb9\x1c\x2c\xa6\xb3\xc9\xdd\xe4\x6a\x72\x73\x3c\x9b\xcb\x47\xc1\x25\x09\x16\xb1\x92\x46\x52\xc9\x5f\xa7\xc0\xcd\xe4\xfa\x66\xf8\x30\x3c\x9e\xdc\x5c\x86\x1c\x53\x7c\xa5\xb8\x57\x97\x37\xa3\xab\xc9\x62\x7e\xff\x6d\x3c\x3c\x5e\xa0\x50\xc2\x19\x95\x9e\x4e\x7c\x81\x2f\x0c\x94\xd1\xed\xe5\xf5\x70\x31\x1b\x5e\x0f\xff\x9c\x2e\xee\x66\x97\xe3\xf9\xcd\xe5\xdd\x68\x32\x3e\x9a\xec\xae\x66\x2f\x14\x86\xf8\x14\x2f\x8c\x22\x42\x73\x77\x68\xbd\xce\xfe\xb3\xcb\x3f\x16\x83\xe1\xc3\xe8\x6a\x38\x3f\x9a\x06\x8a\x3c\x2e\x02\xb4\x28\x57\xbf\x32\x49\xf3\x92\x78\x33\xb9\xbe\x1e\x8d\xaf\x8f\x5e\x16\xb9\x0c\x43\x26\x9a\x4b\x0e\x8d\xf8\xe9\xfd\xe2\x76\x32\x38\x62\x86\xd2\x38\xf1\x22\x19\xbc\x36\x45\xb3\x88\xaf\x84\xfa\x7c\x31\x18\xcd\x9a\xd2\xf7\xa1\x87\x86\x16\x87\x76\x8e\x2c\x0a\x54\x4d\x5b\x88\xba\x04\x34\x19\x12\x39\x18\x8d\x9e\xc2\x48\x00\x25\x1a\xe1\xd1\x02\xf2\xff\x20\x35\xc0\x25\x25\xbc\x04\xc1\x8e\x83\x9d\x7d\x24\xc2\x58\xe4\x6d\xbb\x3b\x66\x40\x48\x03\x72\xb9\x64\x94\x11\xce\x37\x40\x52\xc2\xb8\xeb\x00\xa5\xc0\x37\x00\xbb\xb9\x22\x87\xe0\xdc\x2a\xd8\xd1\x1b\xdd\x5b\xea\x1e\x0d\x95\x4c\xe2\x16\xd4\x69\x0c\xd7\x49\x2d\x46\x8a\x64\x90\xf0\x5a\x1a\x65\x84\xed\x71\x85\x24\x98\x08\xbe\x69\x39\xbb\xca\xd2\xf6\xb2\x2d\x5e\x8d\xc1\x83\x18\xbd\x37\xd8\x6e\x43\xfa\x1f\xc3\x90\xdd\xd4\xcd\xe0\x84\x1d\x41\xdb\xa6\xb6\x38\xfe\x19\x6a\xcf\x02\x7c\x34\xba\x12\xda\xb6\x6d\xe3\x32\x74\x0d\x21\x2b\x5b\xbd\x15\x2a\x04\x1f\x29\x71\xd7\x14\x66\x85\xea\x91\x69\x2c\xdb\x3f\x67\xaa\x58\xc9\x20\xa1\x08\xa8\x94\x54\x55\x96\x9c\xad\x11\xcc\x8a\x55\x02\xf0\x14\xee\xf3\xab\x0f\x69\x3b\x42\x2f\xbf\xa3\xa0\x2b\xa2\x02\x4c\x61\xc9\x38\xc2\xc7\xcc\x06\x32\xec\xa5\x91\xee\x91\x65\xf0\xe5\x57\xdf\xf7\xbd\xaf\xf8\xdb\x17\xef\xe2\x02\xbf\x78\xbf\xfd\xfa\xcf\x0b\xef\xfc\xf3\x3f\x3e\x9f\x13\x7a\x7e\x7e\x7e\xfe\xb9\x47\x99\x52\x52\x7b\x69\xb4\x38\x3f\xe3\x32\xfc\xd8\x87\xb1\x04\x9d\xd0\x55\xc6\x51\xaa\xb2\x8d\xdd\xb4\x3b\x8c\x48\x7b\xbb\x5b\x9b\x8a\x28\xed\x86\x28\x37\xe6\xf3\xd4\x6d\xa7\xbd\xa4\x45\x79\x4d\x93\x61\x33\x85\x09\xd4\x7a\xaa\xa4\x8f\x55\x12\x7c\xda\xde\x94\x65\x7f\xad\x92\x92\x89\xd8\xf3\x99\xe8\x55\x4a\x4a\x36\xea\xd1\xc6\x80\x96\x94\x18\xf0\xe0\x7e\x3c\xfa\xb3\xdf\x0c\xc0\x5e\x35\xe0\x3c\x25\xe1\x5f\x56\xb3\x9e\x48\x38\x6f\x14\xe3\xce\xd6\xff\x67\x2f\xc6\x87\x54\xd9\xe3\x97\xa3\xd3\xac\x98\xba\x7b\x9d\x6a\xa5\x06\xa2\xb0\xbc\x4b\x03\x7f\x03\x3a\x89\x51\x45\x6c\x57\x21\xfb\xd9\x8a\xfc\xf1\xda\xfa\x9f\xa1\x24\xd7\xb9\x24\xda\xc9\x60\x93\xd7\x5d\x3a\x29\x81\x06\x75\x79\xff\x94\x5f\x3c\xf5\xb2\x80\xec\xd9\x65\xad\x8d\x0e\xb8\xdc\xea\xd6\x3b\xdf\xa4\x17\xcb\xa0\x1d\x08\x96\xab\x9d\xe8\xbc\x24\xdb\x19\xda\x6f\x52\x85\xab\x2b\x3a\xf0\x5f\x53\x52\x37\xec\xd9\xdf\x5e\xa5\x75\x69\x97\x75\xa7\xcd\xf3\xb2\xd4\xac\x71\x5a\x1c\x98\x4b\x77\xd6\x90\x50\x48\x6d\x18\x85\x38\x51\xb1\xd4\xf8\x1e\x67\x87\x40\xb3\xf7\x6a\xb2\x88\x3b\xb7\xee\x15\x9e\xf9\x2b\x9d\x3a\x56\xcf\xdc\xfb\xee\xee\x72\xcf\x31\x53\x89\xa0\xf7\xbb\x7d\x4e\x23\xfd\x52\x30\x7e\xec\x12\xf5\xa3\xe0\xe7\xd0\x32\xbc\xeb\xb8\xd8\x7f\xd0\x64\x16\xab\x7c\x03\xb1\x5c\x2b\xb8\xd4\xa6\xd9\x4a\x6a\x63\xfb\x79\xc8\xfa\x79\x20\x94\xa2\xd6\xa5\xbf\xdd\x17\x33\xcb\xbf\x1a\xb8\x6d\x09\x9b\xda\xec\x25\xec\xee\x98\x3a\xfa\xa5\xbd\x5c\xba\xce\xd5\x2e\x33\xed\x65\x52\x3b\x34\x5b\xe7\xe8\x5e\xd2\x2a\x56\x68\xa2\x87\x53\xb8\x9b\x0c\x26\x7d\x08\x1c\x4a\xb1\xb0\x9c\xca\x00\xf3\x0f\x08\x90\x9d\x51\x0e\x67\xd9\x6a\xe1\xda\x83\x2d\xe1\x8a\xe9\x0c\xad\xe4\x18\x03\xae\x66\x23\xdb\x1d\x3c\x6d\x80\x09\x6d\x08\xcf\x2a\xae\x85\x62\xd5\x0d\x99\xc8\x5c\x99\xc1\x9b\xf2\x9b\xe4\xd9\x21\xaa\xec\xfb\x6e\xb1\xe3\xd3\xc7\xb3\xfc\xba\xb2\xb0\x2b\x07\x0f\x62\xd4\x4c\xbc\xae\x74\x7c\x9e\x51\x25\x43\x9b\xdf\x62\xf6\x12\xff\x00\x6a\x38\x10\x33\x1c\x64\x84\x4e\x00\xb1\x13\x3e\x1c\xc2\xb2\xe9\x98\xda\x27\xa0\x43\xec\x59\x82\x85\x6a\x6d\xeb\xaa\x89\x07\x31\xdb\xeb\xe5\x97\x30\xeb\x02\x8a\xfb\x60\xe2\x41\xd2\x75\x98\xbd\x81\x71\x0e\x92\xab\x0e\x24\xba\x41\x88\xb7\xbd\x37\xec\xef\x3a\xc2\xbc\x0c\x88\x75\x62\xb0\xfd\x48\xad\xf9\xa4\x45\xf9\x84\x9e\x91\xc4\xac\xa4\x62\xff\x73\x6b\xce\xd6\x5f\xf5\x19\x93\xbd\xf4\xc2\x47\x43\x8a\xc7\x2e\xf9\x6b\x8f\x99\xe4\xf8\x8d\x89\x80\x89\x70\xcf\xab\x17\x25\x39\xe6\x17\x9e\x24\x66\xd7\xb6\xa8\xef\xd9\xe9\x04\xa0\xb5\x47\x8b\xa5\x4e\x7c\xdb\x9f\xea\xfe\x89\x97\xaf\x9e\xd7\x5e\x5a\x1c\xfe\xf2\xc6\x5a\xa0\xbd\xdf\xcb\x6c\xf2\x8a\x07\x3f\xca\x9e\x4a\x76\xbd\x57\xda\x24\x3f\x9b\x3d\xf8\xf0\xc1\xfd\x50\xa8\x65\xa2\x28\x96\xe3\xe5\xab\x13\x9d\x0f\xb8\xb7\x21\xee\x77\x8a\xca\xdf\xae\x73\x57\x40\xf9\x7f\x42\x34\x6f\xe1\xe5\x0e\x1d\x4b\x71\x3c\x0b\x52\x51\x15\x3a\x35\x34\xca\xf5\xa9\x69\xd3\xd0\xa5\x94\x3e\x13\xd7\xfe\xcb\x99\xce\x7e\x3c\x12\x43\x57\xef\xa4\x41\x91\x3e\x89\x46\x65\x67\x7e\x58\x11\xcf\x62\x7c\x95\x15\x93\x86\x52\xef\x9a\x69\xc5\xf1\x63\x03\xc2\xf3\xf3\x65\x6f\x98\x76\x2d\x57\x57\xf3\xef\x25\xcc\xaf\x73\x44\x97\xb1\xcd\x72\xa1\x9f\x85\xf1\xfb\x96\xa2\x68\xeb\xe4\x77\xb0\xcf\xae\x40\xfa\x8b\x94\x29\x8f\xaa\x60\x77\xd0\x93\x98\xe1\x93\x41\xe1\xde\x72\xe5\x3c\xbb\x12\x21\xd1\x46\x46\xc5\x60\x80\xee\xd1\x59\x7e\x14\x55\x72\x21\x2f\x4e\xed\x6d\x8a\x6e\x73\xfd\x55\x77\x70\xcf\x67\xdd\x39\x16\x91\x38\x66\x22\xd4\xd5\x89\x32\x42\x8b\x99\xca\x96\x65\x2d\x79\xf7\x3c\xac\xd9\xf3\xed\xc3\xcb\xb2\x7d\xdb\x90\x6a\x3c\x6e\xe9\x64\xf8\x8a\xd3\xed\xff\x01\x00\x00\xff\xff\x0e\x8a\xf8\x31\x2a\x2b\x00\x00")

func deployDataVirtletDsYamlBytes() ([]byte, error) {
	return bindataRead(
		_deployDataVirtletDsYaml,
		"deploy/data/virtlet-ds.yaml",
	)
}

func deployDataVirtletDsYaml() (*asset, error) {
	bytes, err := deployDataVirtletDsYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "deploy/data/virtlet-ds.yaml", size: 11050, mode: os.FileMode(420), modTime: time.Unix(1522279343, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"deploy/data/virtlet-ds.yaml": deployDataVirtletDsYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"deploy": &bintree{nil, map[string]*bintree{
		"data": &bintree{nil, map[string]*bintree{
			"virtlet-ds.yaml": &bintree{deployDataVirtletDsYaml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

