// Code generated by go-bindata. DO NOT EDIT.
// sources:
// deploy/data/virtlet-ds.yaml
package tools

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _deployDataVirtletDsYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\x5f\x73\xda\x3a\x16\x7f\xcf\xa7\x38\x73\x33\xb3\x6d\x1f\x1c\x92\xce\xde\x6d\x2f\x33\xfb\x90\x26\xdc\x2c\xd3\x34\x30\x40\x73\xf7\x8d\x11\xf2\xc1\xe8\x22\x4b\xde\x23\xd9\x09\xfb\xe9\x77\x24\x1b\xe3\x7f\x50\x9a\x26\x99\xed\xec\xf2\x04\x96\xf4\xd3\xf9\xfb\x3b\x47\x32\x41\x10\x9c\xb0\x44\xdc\x23\x19\xa1\x55\x1f\xf0\xd1\xa2\x72\x5f\x4d\x2f\xbb\x58\xa0\x65\x17\x27\x6b\xa1\xc2\x3e\x5c\x33\x8c\xb5\x9a\xa2\x3d\x89\xd1\xb2\x90\x59\xd6\x3f\x01\x50\x2c\xc6\x3e\x64\x82\xac\x44\x5b\xfc\x36\x09\xe3\xd8\x87\x75\xba\xc0\xc0\x6c\x8c\xc5\xf8\xc4\x24\xc8\xdd\x74\x8b\x71\x22\x99\x45\xf7\x1d\xa0\x0a\xe4\x3e\x4d\x30\xf7\x91\x6c\x81\xd2\x6c\x67\x00\x50\xaa\xac\x68\x4e\xdb\xc2\xbb\xcf\x4a\x1b\x7b\x87\xf6\x41\xd3\xba\x0f\x96\x52\x2c\x9e\x87\xca\x8c\xb5\x14\x7c\xd3\x87\x2b\x99\x1a\x8b\xf4\xbb\x20\x63\xff\x10\x76\xf5\x8f\x7c\x49\x31\xf1\xd4\x43\x8c\x87\xd7\x20\x8c\x07\x00\xab\xe1\xed\xc5\x3b\x40\xc5\x16\x12\xe1\xfe\x8b\x71\x4f\x4c\x4a\x99\xc8\x70\x2b\x07\x70\xad\x2c\x13\x0a\x09\x08\x8d\x65\xb4\x83\x7b\x6b\x35\x2c\x10\xf8\x0a\xf9\x1a\xc3\x77\xc0\x54\x08\x6f\xdf\xbf\x73\x20\x05\xa4\x5d\x21\xa4\x06\x41\x2f\x41\x19\x54\x16\x09\x84\x02\xa1\x44\x05\xb6\xa2\xde\x78\x78\x5d\x53\xed\x14\x16\x5a\x5b\x63\x89\x25\x90\x90\xe6\x18\xa6\x84\xa0\x10\x43\x2f\x29\x27\x64\x16\x81\x39\xac\xa5\x88\x62\x96\x38\xf4\x8a\x7b\x76\x5e\x2b\x00\x0d\x52\x26\x38\x5e\x72\xae\x53\x65\xef\x6a\x6e\x29\xf7\xd4\x4a\x6e\x9c\x3b\xe0\xbe\xb0\x40\xa2\x43\x03\x5a\x79\x6d\x94\x0e\xd1\xc0\x83\xb0\x2b\x17\x51\xc4\x26\xb9\xdb\xfe\xbe\xb5\x96\x77\x6b\x01\xc5\x96\x4b\xa7\xea\x66\xe7\x64\xb7\xfa\xb2\xf5\x14\x80\xf0\x5f\xa9\x20\x0c\xaf\x53\x12\x2a\x9a\xf2\x15\x86\xa9\x14\x2a\x1a\x46\x4a\x97\x8f\x07\x8f\xc8\x53\xeb\x82\xb9\xb2\x32\xc7\x9c\xa2\x44\x6e\x35\xcd\x90\x62\x53\x1f\x0e\x20\x66\x96\xaf\x06\x8f\x09\xa1\xf1\xf1\x5f\x1f\x77\x33\xd6\xb8\xe9\xd7\xd4\x69\xcc\x00\xd0\x09\x12\xb3\x9a\xfa\x30\x54\xad\xc1\x8c\xc9\x14\x5b\xb0\x0e\xb8\x61\x5b\xa7\xf7\xd5\xd6\xef\xe5\x82\x53\x98\xad\xb0\x11\x14\xc0\x75\x22\xd0\x6c\x01\xde\x18\x58\x4a\x7c\xcc\xb4\x4c\x63\x84\x90\x44\x56\xc6\xcd\xa9\x8b\x04\xe7\x99\x10\x97\x2c\x95\xd6\xfb\xdf\x7b\x4d\xa6\x91\x50\x10\x0a\xf2\x81\x89\xca\xa4\x84\x06\xec\x8a\xed\x22\xd8\xaf\x13\xe4\x6d\xe7\xb6\x73\xa1\x85\x21\x2c\x36\x20\xc5\xc2\xed\x0d\x7f\x29\xf3\x00\x1f\x85\xb1\xdb\x30\x70\xd1\x7a\xb2\xd5\x32\x4f\xef\x84\x30\x61\x84\x81\xf3\x47\x69\x0a\x11\xb3\x08\xfb\x10\x0b\x62\xca\x0a\xd3\xab\x73\x40\x31\x3e\x4e\xa5\xdc\xa6\xf0\x70\x79\xa7\xed\x98\xd0\x65\x4b\x39\x8b\xeb\x38\x66\x2a\xdc\x59\x38\x80\x5e\x75\xbb\x33\xb3\x2a\x87\x72\x1b\x7d\x71\xf1\x6d\xaa\x0b\x72\x21\xd7\x1f\x4d\xb0\xb3\x64\x90\xdb\xc8\x04\xa1\xa0\x8a\xf7\x62\xb7\x78\xcc\xec\xaa\x0f\xbd\xc2\x9a\x41\x7d\x41\x0b\x97\x52\xd5\x02\x20\x9d\xb0\x88\xf9\x80\x85\x4f\x22\x37\xb3\xd0\x8a\xc9\x3d\x5b\x55\x31\xb6\xb8\xa1\xe6\x6b\x24\xa3\xf9\x7a\xcf\xa2\x8c\x91\x5b\xd8\xcb\x27\x9e\xd5\x66\x6e\x41\xa4\x8e\xf6\xac\x76\x6e\xac\x8e\x9e\xc2\x52\x53\x1e\x2a\x42\x45\x3e\x56\xf2\x2d\xa4\x58\xf4\x8a\x90\xe8\x79\x9f\x99\x3c\x1e\x3c\x2f\xd4\x3c\xbe\xdd\x34\x63\x14\x48\xb1\x38\xb0\x71\xd0\x9c\x52\x2a\x8d\xd9\x9e\x65\xd5\x11\x83\x3c\x25\x61\x37\x2e\xa1\xf0\xd1\x56\xd3\x2f\x21\x91\x09\x89\x11\x86\x35\x3a\x05\x40\x95\xb5\x63\xe2\x7e\x38\x99\xdd\x0e\x66\xf3\xeb\xe1\xf4\xf2\xd3\xed\x60\xfe\xf9\xfe\x4b\x05\xcb\x27\xf7\xef\xa4\xe3\x7a\x7e\xe7\x94\xfb\x85\x25\x9f\x71\x33\xc1\x65\x33\xf9\x6b\x15\x2f\xc8\x27\x37\xa6\x78\xd2\x09\x85\x71\x85\x62\xbe\xce\xe2\xc6\xb0\x4e\xf2\x60\x29\x34\x38\x29\xb7\x6d\xb0\x47\xe9\xe4\xdc\x3b\x47\x67\xde\x29\x0c\x15\x70\x66\x10\x1e\x1c\xf9\xfc\x89\xdc\x82\xd4\x9c\xc9\x32\xe1\x3d\x82\x1b\x7d\x60\xca\x3a\x96\x71\x95\x4c\x58\x50\xda\x82\x5e\x2e\x05\x17\x4c\xca\x0d\xb0\x8c\x09\xe9\xab\x9d\x56\xf8\x0c\x89\x5d\x28\x72\x4c\x4e\x57\x43\xc3\x6c\x4c\x6f\x69\x7a\x3c\x22\x9d\x26\x27\x4d\x4f\x34\x1e\xd7\x97\xba\xe0\x8e\x75\x98\x4a\x34\xad\x85\xed\xe7\x84\x2c\x1c\x29\xb9\x69\x84\x56\x1d\xd2\xd5\xed\x16\x56\xe3\xe1\x51\x40\x75\x62\xf9\x11\xb2\x09\x5a\xbc\xe1\xf4\x6e\x86\x45\x77\xb3\xb6\x6f\x75\x33\xe8\x60\x4f\x30\xb6\x57\x3b\xce\xfa\xc6\xea\xc0\x91\x19\x5a\x53\x09\x59\x57\x7a\xa4\x8e\x7c\x51\x13\x65\xb9\x5a\x21\x21\x2c\x90\x33\xdf\x6a\xd9\x15\xd2\x83\x30\x58\x96\xb0\x07\x21\xa5\x6b\x9f\xc2\x94\x23\x20\x91\xa6\x2a\xa4\x14\x6b\xd7\xa7\x89\x4a\x60\x9d\xc2\xd7\xa2\x7d\xd3\xae\xaa\x05\x45\x9f\xc5\x57\x8c\x42\xcc\x60\x29\x24\xc2\x9b\xdc\x06\x3a\xea\x65\xb1\xe9\xb1\x65\xf8\xe1\xd7\xc5\x62\x11\x7c\xc4\xdf\x3e\x04\x17\x17\xf8\x21\xf8\xed\xd7\xbf\x5d\x04\xe7\xef\xff\xfa\xfe\x9c\xf1\xf3\xf3\xf3\xf3\xf7\x3d\x2e\x88\xb4\x09\xb2\x78\x7e\x7e\x26\x75\xf4\xa6\x0f\x77\xae\xdb\xe4\xab\x1c\x51\x53\x59\x8a\x37\x6d\x36\x8d\x4d\xb0\x9f\xc6\x2b\xa2\xb4\xc9\xbf\x30\xe6\xb7\x57\xb7\x9d\xf6\x7f\x3a\x2e\x3f\x0d\x3a\x6e\x78\xa7\xab\xab\xf9\x6f\xe7\xde\x63\x48\xf5\xf9\xd8\xe7\x34\xe7\x44\xdf\x8a\x56\x09\x17\x18\x61\xd9\xfe\xbb\xc6\xd3\xa4\x09\x52\x2c\xd4\x4f\xc8\xd5\x3f\x23\xa7\xd6\x51\x52\xe3\x65\xc0\x47\xe4\xbe\xf3\x25\x85\x16\x4d\xd9\x04\x17\xdd\x6f\x2f\x0f\x9d\x9e\x9b\xd6\xda\xe8\x88\x0e\xbb\x5b\xef\x62\x93\x9e\x3b\x6d\x76\xa2\xba\x81\xce\x4e\xfd\x98\xda\xf7\x74\x1a\xad\xce\x40\xcb\xb7\xde\x2d\xda\xe0\x96\xa4\xfe\x71\xe0\xbe\x07\x96\x98\x32\xd2\x0b\xd6\xe6\x65\xaf\xcd\x7e\x59\x76\xd6\xaf\x4d\xfa\x5f\x64\xd9\x0e\xa1\x47\x7f\xdc\xdd\x8e\x2e\xaf\xe7\xe3\xc9\x68\x36\xba\x1a\xdd\xbe\x9e\xe8\xfa\x41\x49\xcd\xc2\x79\x42\xda\x6a\xae\xe5\xd3\x14\xb8\x1d\xdd\xdc\x0e\xee\x07\xaf\x27\xb7\xd4\x91\xc4\x0c\x9f\x28\xee\xd5\xe5\xed\xf0\x6a\x34\x9f\x7e\xfd\x74\x37\x98\xbd\x9a\xcc\x9c\x49\xc1\x75\x60\xd2\x85\xaa\x91\xe9\x11\x82\x0f\xbf\x5c\xde\x0c\xe6\x93\xc1\xcd\xe0\x9f\xe3\xf9\x6c\x72\x79\x37\xbd\xbd\x9c\x0d\x47\x77\xaf\x26\xbb\x67\x81\x39\x61\x84\x8f\xc9\xbc\xc2\x03\x4f\x8c\xf7\x22\x49\x6f\x47\x37\x37\xc3\xbb\x9b\x57\x4f\x54\xa9\xa3\x48\xa8\xe6\x94\x23\x85\x9f\x4e\x86\xa3\xfb\xf9\xf4\xeb\x78\x3c\x9a\xbc\x5e\xf0\x18\x12\x3a\x9b\x9b\x34\x49\x34\x3d\x29\x78\x2a\x51\x33\x9d\x5f\x0f\x27\x4d\xc9\x0f\x57\x83\x2d\xd6\xe7\xaf\x9f\x06\x93\xbb\xc1\x6c\x30\x9d\x8f\x47\xd7\xce\x81\xd3\x36\xd0\x2f\x0d\xb6\xff\xa5\xd9\x5e\x56\xea\xd1\xcb\x5d\xa8\x65\xb1\xf9\xde\x33\xf7\x6b\x37\x3c\x3f\x7a\x16\x3a\xee\x24\x13\xec\x6d\x27\x0f\x37\xa2\xb9\xc5\x2a\xd7\xba\x0e\xb5\x72\x4c\x5d\x6a\xf2\xf7\xa6\x40\xec\xc1\x89\x22\x38\x02\xe3\x1c\x8d\x29\xfd\xed\x5f\x02\x38\xfc\x6a\x5d\x6f\x4b\xd8\xd4\xe6\xe0\xc2\xee\x8b\x91\x8e\x6b\x91\x83\x28\x5d\x7d\x77\x97\x99\x0e\x82\xd4\x9a\xea\x56\x9f\x7d\x70\x69\xf5\xd4\xd1\x3c\x87\x9c\xc2\x6c\x74\x3d\x72\xc5\x59\xbd\xb1\xe0\x4e\xe9\x5c\x87\x58\xdc\x9d\x42\xde\xf1\xfa\xf3\x95\x4b\x7b\x7f\x5b\xb0\x5b\xb8\x12\x26\xbf\x20\x28\xce\x20\x70\x35\x19\x42\x42\xfa\x71\x03\x42\x19\xcb\x64\xce\xdb\xee\x08\x56\xdd\x50\xa8\xdc\x95\x3e\x22\x76\xaf\x59\xce\x8e\x51\xe5\xd0\x95\xed\x9e\x5b\xdf\x6f\xe2\x75\x65\x61\x57\x0e\x1e\x05\xd4\x4c\xbc\xae\x74\xfc\x36\x50\x25\x43\x9b\xd7\xd0\x07\x17\xff\xc0\x19\xe4\xc8\x13\xc8\x51\x46\xe8\x3c\x8e\xec\x3d\x8c\x1c\x03\xd9\x74\x4c\xed\xf6\xfb\x18\x7b\x96\xc5\xa6\xca\x6d\x5d\x9c\x78\x14\xd8\x41\x2f\x7f\x0f\x58\xd7\xb1\xf3\xd0\xa1\xf3\x28\xe9\x3a\xcc\xde\x38\x31\x1d\x25\x97\x42\xab\x9a\x38\xfe\x59\xcd\x77\x65\xcf\xd1\xdf\x57\xc2\x82\xfc\x58\xd7\x79\xa2\x3b\x7c\xee\x6b\xbe\x87\xa7\x05\xe3\x67\x2c\xb5\x2b\x4d\xe2\xdf\x7e\xce\xd9\xfa\xa3\x39\x13\xba\xf1\x5a\xbe\x78\x97\x3d\xd1\x12\x3f\x09\x15\xba\xf6\x6b\xff\xfb\x79\xd2\x12\x8b\x66\x89\x25\xe2\xc6\x91\xfa\x81\x9d\x4e\x00\x5a\x7b\xb4\x20\x4d\xba\xf8\x13\xb9\xab\xfd\x41\x31\x7b\x5a\x7b\x79\x7c\xfc\x7f\x04\x9c\x05\xda\xfb\x7d\x9f\x4d\x9e\xf0\xd7\x04\x72\x55\xc9\xcd\x0f\x4a\x9b\x54\x5e\x9a\xfc\x92\x37\x59\x84\x46\xa7\xc4\xb1\x32\x52\xbe\x4c\xcf\x3d\x9c\x21\x2d\xaa\xa3\xfe\x2e\xf8\x39\xbc\xda\xa1\x53\xb9\x75\x40\xc8\x42\xa4\xad\x0e\x0d\x0d\x0a\xe9\x6b\xb2\x37\xe4\x2e\xa5\x0e\x20\xf2\x46\x0a\x40\x0a\x93\x7f\x79\x60\x96\xaf\x5e\x48\x83\x6d\xba\xa4\x06\xc9\x8d\xfc\xb0\x22\x01\x18\xe4\x94\x93\x47\x43\xa9\x17\xcd\xac\x6d\xb9\x51\x3a\xc4\x60\x51\x4c\x7b\xc6\x34\x6b\xb9\xba\x9a\x6f\xdf\x03\x7e\x53\x74\x70\x39\x6c\x1e\xfb\x7d\xff\x2f\x8d\x17\xa6\x9e\x78\xe7\xe4\x17\xb0\xcf\xbe\x40\xfa\x49\x68\x29\xe0\x14\x7e\x8b\x81\x58\x22\x76\x7f\xca\x2a\x90\xf7\xb3\x52\x6a\xac\x8e\xb7\x03\x21\xfa\xff\xd0\x94\x65\xa8\x9b\xa4\xf6\x6d\x5c\xc8\xe8\xb6\xdc\xbb\x5f\x31\xc7\x57\xb5\x98\x25\x89\x50\x51\xe7\x56\x05\xab\xe4\x3f\x5e\x3c\x2b\x6b\xd6\x7d\xfe\x60\x73\xb0\xcf\x1b\x60\x55\x4b\x64\x5b\x55\x1b\x80\x4f\xa8\x6d\xff\x09\x00\x00\xff\xff\x84\x24\xc2\xe8\xdd\x27\x00\x00")

func deployDataVirtletDsYamlBytes() ([]byte, error) {
	return bindataRead(
		_deployDataVirtletDsYaml,
		"deploy/data/virtlet-ds.yaml",
	)
}

func deployDataVirtletDsYaml() (*asset, error) {
	bytes, err := deployDataVirtletDsYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "deploy/data/virtlet-ds.yaml", size: 10205, mode: os.FileMode(420), modTime: time.Unix(1522279343, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"deploy/data/virtlet-ds.yaml": deployDataVirtletDsYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"deploy": &bintree{nil, map[string]*bintree{
		"data": &bintree{nil, map[string]*bintree{
			"virtlet-ds.yaml": &bintree{deployDataVirtletDsYaml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

