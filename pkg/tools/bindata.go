// Code generated by go-bindata. DO NOT EDIT.
// sources:
// deploy/data/virtlet-ds.yaml
package tools

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _deployDataVirtletDsYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x5a\x5b\x73\xe2\x38\x16\x7e\xcf\xaf\x38\x35\xa9\xda\xee\x7e\x70\x48\xba\x76\xb6\x7b\xa8\xdd\x87\x74\x60\xb2\xd4\x24\x40\x41\x92\x9e\x37\x4a\x96\x0f\x46\x83\x2c\x79\x25\xd9\x09\xfb\xeb\xb7\x24\x5f\xf0\x0d\x42\xae\x33\xbd\x79\x22\x92\xce\xa7\x73\xbf\xd8\xf6\x3c\xef\x88\xc4\xec\x0e\x95\x66\x52\xf4\x01\x1f\x0c\x0a\xfb\x53\xf7\xd2\x33\x1f\x0d\x39\x3b\x5a\x33\x11\xf4\x61\x40\x30\x92\x62\x8e\xe6\x28\x42\x43\x02\x62\x48\xff\x08\x40\x90\x08\xfb\x90\x32\x65\x38\x9a\xfc\x7f\x1d\x13\x8a\x7d\x58\x27\x3e\x7a\x7a\xa3\x0d\x46\x47\x3a\x46\x6a\x8f\x1b\x8c\x62\x4e\x0c\xda\xdf\x00\x55\x20\xfb\xd7\x04\xb3\x7f\x9c\xf8\xc8\x75\x71\x02\x40\x25\xc2\xb0\xe6\xb1\x02\xde\xfe\xad\xa4\x36\x63\x34\xf7\x52\xad\xfb\x60\x54\x82\xf9\x7a\x20\xf4\x54\x72\x46\x37\x7d\xb8\xe0\x89\x36\xa8\x7e\x65\x4a\x9b\xef\xcc\xac\xfe\x9d\x91\xe4\x07\x8f\x1d\xc4\x74\x34\x00\xa6\x1d\x00\x18\x09\x1f\xcf\x3e\x01\x0a\xe2\x73\x84\xbb\x6b\x6d\x57\x74\xa2\x52\x96\x62\xc1\x07\x50\x29\x0c\x61\x02\x15\x28\xd4\x86\xa8\x2d\xdc\x47\x23\xc1\x47\xa0\x2b\xa4\x6b\x0c\x3e\x01\x11\x01\x7c\xfc\xfc\xc9\x82\xe4\x90\x66\x85\x90\x68\x04\xb9\x04\xa1\x51\x18\x54\xc0\x04\x30\xc1\x2a\xb0\x15\xf1\xa6\xa3\x41\x4d\xb4\x63\xf0\xa5\x34\xda\x28\x12\x43\xac\x24\xc5\x20\x51\x08\x02\x31\x70\x9c\x52\x85\xc4\x20\x10\x8b\xb5\x64\x61\x44\x62\x8b\x5e\x31\xcf\xd6\x6a\x39\xa0\x46\x95\x32\x8a\xe7\x94\xca\x44\x98\x71\xcd\x2c\xe5\x9d\x52\xf0\x8d\x35\x07\xdc\xe5\x1a\x88\x65\xa0\x41\x0a\x27\x8d\x90\x01\x6a\xb8\x67\x66\x65\x3d\x4a\x91\x59\x66\xb6\x7f\x15\xda\x72\x66\xcd\xa1\xc8\x72\x69\x45\xdd\x6c\x8d\x6c\xa9\xcf\x5b\xab\x00\x0a\xff\x93\x30\x85\xc1\x20\x51\x4c\x84\x73\xba\xc2\x20\xe1\x4c\x84\xa3\x50\xc8\x72\x79\xf8\x80\x34\x31\xd6\x99\x2b\x94\x19\xe6\x1c\x39\x52\x23\xd5\x0d\xaa\x48\xd7\xb7\x3d\x88\x88\xa1\xab\xe1\x43\xac\x50\x3b\xff\xaf\xef\xdb\x13\x6b\xdc\xf4\x6b\xe2\x34\x4e\x00\xc8\x18\x15\x31\x52\xf5\x61\x24\x5a\x9b\x29\xe1\x09\xb6\x60\x2d\x70\x43\xb7\x56\xee\x8b\xc2\xee\x25\xc1\x31\xdc\xac\xb0\xe1\x14\x40\x65\xcc\x50\x17\x00\x1f\x34\x2c\x39\x3e\xa4\x92\x27\x11\x42\xa0\x58\x5a\xfa\xcd\xb1\xf5\x04\x6b\x99\x00\x97\x24\xe1\xc6\xd9\xdf\x59\x8d\x27\x21\x13\x10\x30\xe5\x1c\x13\x85\x4e\x14\x6a\x30\x2b\xb2\xf5\x60\x47\xc7\x94\xd3\x9d\xbd\xce\xba\x16\x06\xe0\x6f\x80\x33\xdf\xde\x0d\x7f\x2b\xe3\x00\x1f\x98\x36\x85\x1b\x58\x6f\x3d\x2a\xa4\xcc\xc2\x3b\x56\x18\x13\x85\x9e\xb5\x47\xa9\x0a\x16\x91\x10\xfb\x10\x31\x45\x84\x61\xba\x57\xcf\x01\xf9\xfe\x34\xe1\xbc\x08\xe1\xd1\x72\x2c\xcd\x54\xa1\x8d\x96\xf2\x14\x95\x51\x44\x44\xb0\xd5\xb0\x07\xbd\xea\x75\x27\x7a\x55\x6e\x65\x3a\xba\xb6\xfe\xad\xab\x04\x19\x93\xeb\xaf\xda\xdb\x6a\xd2\xcb\x74\xa4\xbd\x80\xa9\x8a\xf5\x22\x4b\x3c\x25\x66\xd5\x87\x5e\xae\x4d\xaf\x4e\xd0\xc2\x55\x89\x68\x01\x28\x19\x93\x90\x38\x87\x85\x6f\x2c\x53\x33\x93\x82\xf0\x1d\x57\x55\x31\x0a\xdc\x40\xd2\x35\x2a\x2d\xe9\x7a\x07\x51\x4a\x94\x25\xec\x65\x07\x4f\x6a\x27\x0b\x10\x2e\xc3\x1d\xd4\xd6\x8c\xd5\xdd\x63\x58\x4a\x95\xb9\x0a\x13\xa1\xf3\x95\xec\x0a\xce\xfc\x5e\xee\x12\x3d\x67\x33\x9d\xf9\x83\xcb\x0b\x35\x8b\x17\x97\xa6\x44\x79\x9c\xf9\x7b\x2e\xf6\x9a\x47\x4a\xa1\x31\xdd\x41\x56\xdd\xd1\x48\x13\xc5\xcc\xc6\x06\x14\x3e\x98\x6a\xf8\xc5\x8a\xa5\x8c\x63\x88\x41\x2d\x9d\x02\xa0\x48\xdb\x3e\x71\x37\x9a\xdd\x5c\x0d\x6f\x16\x83\xd1\xfc\xfc\xdb\xd5\x70\xf1\xdb\xdd\x75\x05\xcb\x05\xf7\xaf\x4a\x46\xf5\xf8\xce\x52\xee\x35\x89\x7f\xc3\xcd\x0c\x97\xcd\xe0\xaf\x55\x3c\x2f\x3b\xdc\x38\xe2\x92\x4e\xc0\xb4\x2d\x14\x8b\x75\x1a\x35\xb6\x65\x9c\x39\x4b\x2e\xc1\x51\x79\x6d\x23\x7b\x94\x46\xce\xac\x73\x70\xe4\x1d\xc3\x48\x00\x25\x1a\xe1\xde\x26\x9f\x3f\x90\x1a\xe0\x92\x12\x5e\x06\xbc\x43\xb0\xbb\xf7\x44\x18\x9b\x65\x6c\x25\x63\x06\x84\x34\x20\x97\x4b\x46\x19\xe1\x7c\x03\x24\x25\x8c\xbb\x6a\x27\x05\xbe\x42\x60\xe7\x82\x1c\x12\xd3\x55\xd7\xd0\x1b\xdd\x5b\xea\x1e\x0d\x95\x4c\xe2\xa3\xa6\x25\x1a\xcb\x75\x52\xeb\xdc\x91\x0c\x12\x8e\xba\x45\xd8\x5e\x57\x48\x82\x89\xe0\x9b\x86\x6b\xd5\x21\x6d\xdd\x6e\x61\x35\x16\x0f\x02\xaa\x27\x96\x97\x24\x1b\xaf\x95\x37\xac\xdc\x4d\xb7\xe8\x6e\xd6\x76\x51\x37\x9d\x0e\x76\x38\x63\x9b\xda\xe6\xac\x47\xa8\x3d\x9b\xcc\xd0\xe8\x8a\xcb\xda\xd2\xc3\x65\xe8\x8a\x1a\x2b\xcb\xd5\x0a\x15\x82\x8f\x94\xb8\x56\xcb\xac\x50\xdd\x33\x8d\x65\x09\xbb\x67\x9c\xdb\xf6\x29\x48\x28\x02\x2a\x25\x55\x15\x92\xb3\xb5\xed\xd3\x58\xc5\xb1\x8e\xe1\x36\x6f\xdf\xa4\xad\x6a\x5e\xde\x67\xd1\x15\x51\x01\xa6\xb0\x64\x1c\xe1\x43\xa6\x03\x19\xf6\xd2\x48\xf7\xc8\x32\xf8\xf2\xb3\xef\xfb\xde\x57\xfc\xe5\x8b\x77\x76\x86\x5f\xbc\x5f\x7e\xfe\xc7\x99\x77\xfa\xf9\xef\x9f\x4f\x09\x3d\x3d\x3d\x3d\xfd\xdc\xa3\x4c\x29\xa9\xbd\x34\x5a\x9c\x9e\x70\x19\x7e\xe8\xc3\xd8\x76\x9b\x74\x95\x21\x4a\x55\x96\xe2\x4d\x3b\x9b\x46\xda\xdb\x9d\xc6\x2b\xac\xb4\x93\x7f\xae\xcc\xc7\xa9\xdb\x46\xfb\x53\xd3\xf1\x7c\x36\x9a\xdc\x2d\xe6\xb7\xd3\xe9\x64\x76\xf3\x6e\x09\x59\x2b\x26\xd3\x85\x4e\xe2\x58\xd6\x3c\x13\xda\x29\x79\x17\xe3\x7f\xe9\x3a\x52\x2c\xdb\xe4\xc3\x04\x6a\x3d\x55\xd2\xc7\xea\xb5\xf8\xb0\x9d\xb9\x0a\x1e\x1b\x59\x3a\x93\xba\xe7\x33\xd1\xab\x64\xe9\x6c\xd5\xa3\x8d\x05\x2d\x29\x31\xe0\xc1\xed\x78\xf4\x7b\xbf\x19\xfb\xbd\x6a\xac\x7b\x4a\xc2\x3f\xad\x53\xf5\x44\xc2\x79\xa3\xbe\x75\x76\x8e\x7f\xf5\xfa\x76\x48\xe1\x7a\xbd\x0c\x7f\x9c\xd5\x1d\xd7\xee\x57\x8b\x1a\x10\x85\xe5\x88\x65\x9b\x7b\x9d\xc4\xa8\x22\x26\x7e\xc0\x7a\xf8\x23\xd6\xad\x3a\x4a\xa2\x1d\x0f\x36\xcc\xdc\x74\xa1\x04\x1a\xd4\xe5\xa0\x91\x4f\x18\xbd\xcc\x75\x7a\xf6\x58\xeb\xa2\x03\xa6\x98\x6e\xb9\xf3\x4b\x7a\x76\xa2\xef\x44\xb5\x1b\x9d\xd3\xd0\x21\xfd\xc5\xf3\x4b\x55\xf5\x04\x1a\x5a\x58\x37\x1f\x35\x5a\x9c\xba\x65\xcf\xfe\xf6\x8c\x22\x42\x73\xc7\x58\xbb\xf6\x39\x69\x1e\xe7\xa5\xa6\x8d\x57\xaf\x63\x17\xd3\xdb\xc5\xf5\x64\x30\x7c\xb7\x5a\x40\xe3\x64\x11\x55\x47\xb2\xec\xef\xff\xa9\x7a\xb5\x98\x9e\x7c\x1f\x5f\x4d\xce\x07\x8b\xe9\x6c\x72\x33\xb9\x98\x5c\xbd\x1f\xeb\xf2\x5e\x70\x49\x82\x45\xac\xa4\x91\x54\xf2\xe7\x09\x70\x35\xb9\xbc\x1a\xde\x0d\xdf\x8f\x6f\x2e\x43\x8e\x29\x3e\x93\xdd\x8b\xf3\xab\xd1\xc5\x64\x31\xbf\xfd\x36\x1e\xbe\x5f\x6f\x46\x09\x67\x54\x7a\x3a\xf1\x05\x3e\xb1\x37\x1b\x5d\x9f\x5f\x0e\x17\xb3\xe1\xe5\xf0\xf7\xe9\xe2\x66\x76\x3e\x9e\x5f\x9d\xdf\x8c\x26\xe3\x77\xe3\xdd\xa5\xac\x85\xc2\x10\x1f\xe2\x45\x25\x69\xbd\x2c\x48\xaf\x26\x97\x97\xa3\xf1\xe5\xbb\x07\x2a\x97\x61\xc8\x44\xf3\xc8\x81\xcc\xff\xb0\x8d\xfd\xec\xfc\xfb\x62\x30\xbc\x1b\x5d\x0c\xe7\xef\xc6\xb6\x22\xf7\x8b\x00\x53\x46\x6b\x65\xf0\x00\xa6\x33\x8f\xaf\xb8\xfa\x7c\x31\x18\xcd\x9a\x7c\xef\xaf\xb7\x7f\xd6\x90\x60\x9b\xac\x9c\x25\xf7\x44\x73\xcf\x54\x50\x69\x23\xde\xee\x59\x73\x1a\xe9\xa7\x3e\x8e\x7a\xef\x3e\xf5\xa5\x8f\x09\x0e\x1b\xf2\xbd\x9d\x53\xc0\xfe\xf9\x21\xd3\x58\xe5\x8d\x87\x45\xad\x3c\xc1\x59\x4a\xe5\x5e\x29\x58\x77\x87\xcc\xdd\x81\x50\x8a\x5a\x97\xf6\x76\xef\xc7\x2c\x7e\xb5\x21\x6b\x73\xd8\x94\x66\x2f\x61\xf7\x33\xc3\x8e\x27\x86\x7b\x51\xba\xc6\xa5\x2e\x35\xed\x05\xa9\xcd\x42\xad\xf1\x68\x2f\x69\x75\x58\x6c\x8e\x8f\xc7\x70\x33\x19\x4c\x6c\x9b\x22\x3e\x18\x58\x11\x15\x50\x19\x60\xfe\x5a\x01\xb2\x41\xc5\x8d\xc5\x36\x97\xb8\x07\x69\x5b\xc2\x15\xd3\xd9\xb3\xb3\x7c\x74\x84\x8b\xd9\x08\x62\x25\x1f\x36\xc0\x84\x36\x84\x67\x15\xcc\x4e\xce\xd5\x0b\x99\xc8\x4c\xe9\x3c\x62\xfb\x06\xf2\xe4\x10\x51\xf6\xbd\xcd\xd8\xf1\x42\xe4\x51\xbc\xae\x28\xec\x8a\xc1\x83\x80\x9a\x81\xd7\x15\x8e\x8f\x03\x55\x22\xb4\xf9\x86\x66\x2f\xf1\x0b\x46\xc7\x03\x07\xc7\x83\x94\xd0\x39\x45\xee\x9c\x21\x0f\x81\x6c\x1a\xa6\xf6\x62\xe8\x10\x7d\x96\x15\xac\x9a\xdb\xba\x72\xe2\x41\x60\x7b\xad\xfc\x14\xb0\xae\xa7\x05\xfb\x9e\x15\x1c\xc4\x5d\x87\xda\x1b\x83\xee\x41\x7c\x09\x34\xa2\x89\xe3\xd6\x6a\xb6\x2b\xdb\x98\xfe\xae\x12\xe6\x65\xd3\x78\xe7\x20\xbe\x7f\x5c\x6f\x7e\xa2\xa2\x7c\x42\x4f\x48\x62\x56\x52\xb1\xff\xba\x33\x27\xeb\xaf\xfa\x84\xc9\xc6\x17\x2b\xf9\x67\x1e\x33\xc9\xf1\x1b\x13\x81\x6d\x44\x77\x7f\xba\xa2\x24\xc7\xbc\xff\x22\x31\xbb\xb4\x49\x7d\xcf\x4d\x47\x00\xad\x3b\x5a\x90\x3a\xf1\xff\x40\x6a\x6b\xbf\x97\x9f\x9e\xd7\xbe\xab\x38\xfc\xf3\x19\xab\x81\xf6\x7d\x4f\xd3\xc9\x33\xbe\xda\x51\xb6\x2a\xd9\xf3\x5e\xa9\x93\xca\xfb\xc4\x9f\x7e\x72\x3f\x15\x6a\x99\x28\x8a\x95\x9d\xf2\x3b\x93\xcc\xc2\x29\x2a\xbf\xba\xeb\x5e\x93\xbc\x86\x55\x3b\x64\x2a\xaf\xf6\x6c\x53\x8a\xaa\x90\xa1\x21\x41\xce\x7d\x8d\xf7\x06\xdf\x25\xd7\x1e\x84\x4e\x49\x1e\x70\xa6\xb3\x1f\xf7\xc4\xd0\xd5\x1b\x49\x50\x84\x4b\xa2\x51\xd9\x9d\x17\x0b\xe2\x81\x46\xaa\xb2\xe4\xd1\x10\xea\x4d\x23\xab\x28\x37\x42\x06\xe8\xf9\xf9\xb1\x57\x0c\xb3\x96\xa9\xab\xf1\xf6\x14\xf0\xcb\xbc\x83\xcb\x60\x33\xdf\xef\xbb\x0f\x98\xde\x38\xf5\x44\x5b\x23\xbf\x81\x7e\x76\x39\xd2\x0f\x92\x96\x3c\xaa\x82\xc7\x32\x10\x89\xd9\xf6\x7b\xc5\x1c\x79\x77\x56\x4a\xb4\x91\x51\xb1\x11\xa0\xfb\xbc\xac\x2c\x43\xdd\x49\x6a\xd7\xc5\xc5\xd4\xb9\xfe\xaa\x77\xde\x97\x9f\x71\x55\x2d\x22\x71\xcc\x44\xd8\x79\x55\x9e\x55\xb2\x7f\xde\x3c\x2a\x6b\xda\x7d\x7d\x67\xb3\xb0\xaf\xeb\x60\x55\x4d\xa4\x85\xa8\x0d\xc0\x67\xd4\xb6\xff\x05\x00\x00\xff\xff\xab\xb3\x7d\xc5\xf8\x2a\x00\x00")

func deployDataVirtletDsYamlBytes() ([]byte, error) {
	return bindataRead(
		_deployDataVirtletDsYaml,
		"deploy/data/virtlet-ds.yaml",
	)
}

func deployDataVirtletDsYaml() (*asset, error) {
	bytes, err := deployDataVirtletDsYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "deploy/data/virtlet-ds.yaml", size: 11000, mode: os.FileMode(420), modTime: time.Unix(1522279343, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"deploy/data/virtlet-ds.yaml": deployDataVirtletDsYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"deploy": &bintree{nil, map[string]*bintree{
		"data": &bintree{nil, map[string]*bintree{
			"virtlet-ds.yaml": &bintree{deployDataVirtletDsYaml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

